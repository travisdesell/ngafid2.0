{"remainingRequest":"/ngafid/ngafid2.0/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/ngafid/ngafid2.0/src/main/javascript/update_password.js","dependencies":[{"path":"/ngafid/ngafid2.0/src/main/javascript/update_password.js","mtime":1664810261290},{"path":"/ngafid/ngafid2.0/.babelrc","mtime":1664810261182},{"path":"/ngafid/ngafid2.0/node_modules/cache-loader/dist/cjs.js","mtime":1664910647113},{"path":"/ngafid/ngafid2.0/node_modules/babel-loader/lib/index.js","mtime":1664910647213}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport 'bootstrap';\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { errorModal } from \"./error_modal.js\";\nimport SignedInNavbar from \"./signed_in_navbar.js\";\n\nvar UpdatePasswordPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(UpdatePasswordPage, _React$Component);\n\n  var _super = _createSuper(UpdatePasswordPage);\n\n  function UpdatePasswordPage(props) {\n    var _this;\n\n    _classCallCheck(this, UpdatePasswordPage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(UpdatePasswordPage, [{\n    key: \"clearPasswords\",\n    value: function clearPasswords() {\n      this.state = {\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n      };\n      this.setState(this.state);\n    }\n  }, {\n    key: \"updatePassword\",\n    value: function updatePassword(event) {\n      event.preventDefault();\n      var submissionData = {\n        currentPassword: this.state.currentPassword,\n        newPassword: this.state.newPassword,\n        confirmPassword: this.state.confirmPassword\n      };\n      $(\"#loading\").show();\n      $.ajax({\n        type: 'POST',\n        url: '/protected/update_password',\n        data: submissionData,\n        dataType: 'json',\n        success: function success(response) {\n          console.log(\"received response: \");\n          console.log(response);\n          $(\"#loading\").hide();\n\n          if (response.errorTitle) {\n            console.log(\"displaying error modal!\");\n            errorModal.show(response.errorTitle, response.errorMessage);\n            return false;\n          }\n\n          profileCard.clearPasswords();\n        },\n        error: function error(jqXHR, textStatus, errorThrown) {\n          errorModal.show(\"Error Submitting Account Information\", errorThrown);\n        },\n        async: true\n      });\n      console.log(\"submitting account!\");\n    }\n  }, {\n    key: \"changeCurrentPassword\",\n    value: function changeCurrentPassword(event) {\n      this.state.currentPassword = event.target.value;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"changeNewPassword\",\n    value: function changeNewPassword(event) {\n      this.state.newPassword = event.target.value;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"changeConfirmPassword\",\n    value: function changeConfirmPassword(event) {\n      this.state.confirmPassword = event.target.value;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var hidden = this.props.hidden;\n      var bgStyle = {\n        opacity: 0.8\n      };\n      var fgStyle = {\n        opacity: 1.0\n      };\n      var formGroupStyle = {\n        marginBottom: '8px'\n      };\n      var formHeaderStyle = {\n        width: '150px',\n        flex: '0 0 150px'\n      };\n      var labelStyle = {\n        padding: '7 0 7 0',\n        margin: '0',\n        display: 'block',\n        textAlign: 'right'\n      };\n      var validationMessageStyle = {\n        padding: '7 0 7 0',\n        margin: '0',\n        display: 'block',\n        textAlign: 'left',\n        color: 'red'\n      };\n      var currentPassword = this.state.currentPassword;\n      var newPassword = this.state.newPassword;\n      var confirmPassword = this.state.confirmPassword; //passwords must have valid text\n      //new must equal validate\n      //current must not equal new/validate\n\n      var re = /[\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\!\\/\\\\\\.,a-zA-Z0-9 ]*/;\n      var passwordValidationMessage = \"\";\n      var passwordValidationHidden = true;\n\n      if (currentPassword.length == 0) {\n        passwordValidationMessage = \"Please enter your current password.\";\n        passwordValidationHidden = false;\n      } else if (re.test(currentPassword) && currentPassword.length < 10) {\n        passwordValidationMessage = \"Current password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n        passwordValidationHidden = false;\n      } else if (newPassword.length == 0) {\n        passwordValidationMessage = \"Please enter a new password.\";\n        passwordValidationHidden = false;\n      } else if (re.test(newPassword) && newPassword.length < 10) {\n        passwordValidationMessage = \"New password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n        passwordValidationHidden = false;\n      } else if (confirmPassword.length == 0) {\n        passwordValidationMessage = \"Please re-enter your new password.\";\n        passwordValidationHidden = false;\n      } else if (re.test(confirmPassword) && confirmPassword.length < 10) {\n        passwordValidationMessage = \"Confirmation password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n        passwordValidationHidden = false;\n      } else if (currentPassword == newPassword) {\n        passwordValidationMessage = \"The new password cannot be the same as your current password.\";\n        passwordValidationHidden = false;\n      } else if (newPassword != confirmPassword) {\n        passwordValidationMessage = \"The new password and confirmation password must be the same.\";\n        passwordValidationHidden = false;\n      }\n\n      var updatePasswordDisabled = !passwordValidationHidden;\n      console.log(\"rendering with password validation message: '\" + passwordValidationMessage + \"' and password validation visible: \" + passwordValidationHidden);\n      return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(SignedInNavbar, {\n        activePage: \"account\",\n        waitingUserCount: waitingUserCount,\n        fleetManager: fleetManager,\n        unconfirmedTailsCount: unconfirmedTailsCount,\n        modifyTailsAccess: modifyTailsAccess,\n        plotMapHidden: plotMapHidden\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body\",\n        hidden: hidden\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card mb-1\",\n        style: bgStyle\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        className: \"card-header\",\n        style: fgStyle\n      }, \"Update Password\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body\",\n        style: fgStyle\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return _this2.updatePassword(event);\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        style: formGroupStyle\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2\",\n        style: formHeaderStyle\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"createPassword\",\n        style: labelStyle\n      }, \"Current Password\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2 flex-fill\"\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        id: \"currentPassword\",\n        placeholder: \"Password (required)\",\n        required: true,\n        onChange: function onChange(event) {\n          _this2.changeCurrentPassword(event);\n        },\n        value: this.state.currentPassword\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2\",\n        style: formHeaderStyle\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"createPassword\",\n        style: labelStyle\n      }, \"New Password\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2 flex-fill\"\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        id: \"newPassword\",\n        placeholder: \"Password (required)\",\n        required: true,\n        onChange: function onChange(event) {\n          _this2.changeNewPassword(event);\n        },\n        value: this.state.newPassword\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2 flex-fill\"\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        id: \"confirmPassword\",\n        placeholder: \"Confirm password (required)\",\n        required: true,\n        onChange: function onChange(event) {\n          _this2.changeConfirmPassword(event);\n        },\n        value: this.state.confirmPassword\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2\",\n        style: formHeaderStyle\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2 flex-fill\"\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: validationMessageStyle,\n        hidden: passwordValidationHidden\n      }, passwordValidationMessage)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2\"\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary float-right\",\n        disabled: updatePasswordDisabled\n      }, \"Update Password\"))))))));\n    }\n  }]);\n\n  return UpdatePasswordPage;\n}(React.Component);\n\nvar passwordPage = ReactDOM.render( /*#__PURE__*/React.createElement(UpdatePasswordPage, null), document.querySelector('#password-page'));",{"version":3,"names":["React","Component","ReactDOM","errorModal","SignedInNavbar","UpdatePasswordPage","props","state","currentPassword","newPassword","confirmPassword","setState","event","preventDefault","submissionData","$","show","ajax","type","url","data","dataType","success","response","console","log","hide","errorTitle","errorMessage","profileCard","clearPasswords","error","jqXHR","textStatus","errorThrown","async","target","value","hidden","bgStyle","opacity","fgStyle","formGroupStyle","marginBottom","formHeaderStyle","width","flex","labelStyle","padding","margin","display","textAlign","validationMessageStyle","color","re","passwordValidationMessage","passwordValidationHidden","length","test","updatePasswordDisabled","waitingUserCount","fleetManager","unconfirmedTailsCount","modifyTailsAccess","plotMapHidden","updatePassword","changeCurrentPassword","changeNewPassword","changeConfirmPassword","passwordPage","render","document","querySelector"],"sources":["/ngafid/ngafid2.0/src/main/javascript/update_password.js"],"sourcesContent":["import 'bootstrap';\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { errorModal } from \"./error_modal.js\";\nimport SignedInNavbar from \"./signed_in_navbar.js\";\n\n\nclass UpdatePasswordPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentPassword : \"\",\n            newPassword : \"\",\n            confirmPassword : \"\"\n        };\n    }\n\n    clearPasswords() {\n        this.state = {\n            currentPassword : \"\",\n            newPassword : \"\",\n            confirmPassword : \"\"\n        };\n\n        this.setState(this.state);\n    }\n\n    updatePassword(event) {\n        event.preventDefault();\n\n        var submissionData = { \n            currentPassword : this.state.currentPassword,\n            newPassword : this.state.newPassword,\n            confirmPassword : this.state.confirmPassword\n        };\n\n\n        $(\"#loading\").show();\n\n        $.ajax({\n            type: 'POST',\n            url: '/protected/update_password',\n            data : submissionData,\n            dataType : 'json',\n            success : function(response) {\n                console.log(\"received response: \");\n                console.log(response);\n\n                $(\"#loading\").hide();\n\n                if (response.errorTitle) {\n                    console.log(\"displaying error modal!\");\n                    errorModal.show(response.errorTitle, response.errorMessage);\n                    return false;\n                }\n\n                profileCard.clearPasswords();\n\n            },\n            error : function(jqXHR, textStatus, errorThrown) {\n                errorModal.show(\"Error Submitting Account Information\", errorThrown);\n            },\n            async: true\n        });\n\n        console.log(\"submitting account!\");\n    }\n\n    changeCurrentPassword(event) {\n        this.state.currentPassword = event.target.value;\n        this.setState(this.state);\n    }\n\n    changeNewPassword(event) {\n        this.state.newPassword = event.target.value;\n        this.setState(this.state);\n    }\n\n    changeConfirmPassword(event) {\n        this.state.confirmPassword = event.target.value;\n        this.setState(this.state);\n    }\n\n    render() {\n        const hidden = this.props.hidden;\n        const bgStyle = {opacity : 0.8};\n        const fgStyle = {opacity : 1.0};\n\n        let formGroupStyle = {\n            marginBottom: '8px'\n        };\n\n        let formHeaderStyle = {\n            width: '150px',\n            flex: '0 0 150px'\n        };\n\n        let labelStyle = {\n            padding : '7 0 7 0',\n            margin : '0',\n            display: 'block',\n            textAlign: 'right'\n        };\n\n        let validationMessageStyle = {\n            padding : '7 0 7 0',\n            margin : '0',\n            display: 'block',\n            textAlign: 'left',\n            color: 'red'\n        };\n\n        let currentPassword = this.state.currentPassword;\n        let newPassword = this.state.newPassword;\n        let confirmPassword = this.state.confirmPassword;\n\n        //passwords must have valid text\n        //new must equal validate\n        //current must not equal new/validate\n\n        let re = /[\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\!\\/\\\\\\.,a-zA-Z0-9 ]*/;\n\n        let passwordValidationMessage = \"\";\n        let passwordValidationHidden = true;\n\n        if (currentPassword.length == 0) {\n            passwordValidationMessage = \"Please enter your current password.\";\n            passwordValidationHidden = false;\n\n        } else if (re.test(currentPassword) && currentPassword.length < 10) {\n            passwordValidationMessage = \"Current password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n            passwordValidationHidden = false;\n\n        } else if (newPassword.length == 0) {\n            passwordValidationMessage = \"Please enter a new password.\";\n            passwordValidationHidden = false;\n\n        } else if (re.test(newPassword) && newPassword.length < 10) {\n            passwordValidationMessage = \"New password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n            passwordValidationHidden = false;\n\n        } else if (confirmPassword.length == 0) {\n            passwordValidationMessage = \"Please re-enter your new password.\";\n            passwordValidationHidden = false;\n\n        } else if (re.test(confirmPassword) && confirmPassword.length < 10) {\n            passwordValidationMessage = \"Confirmation password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n            passwordValidationHidden = false;\n\n        } else if (currentPassword == newPassword) {\n            passwordValidationMessage = \"The new password cannot be the same as your current password.\";\n            passwordValidationHidden = false;\n\n        } else if (newPassword != confirmPassword) {\n            passwordValidationMessage = \"The new password and confirmation password must be the same.\";\n            passwordValidationHidden = false;\n        }\n\n        let updatePasswordDisabled = !passwordValidationHidden;\n\n        console.log(\"rendering with password validation message: '\" + passwordValidationMessage + \"' and password validation visible: \" + passwordValidationHidden);\n\n        return (\n            <div>\n                <SignedInNavbar activePage=\"account\" waitingUserCount={waitingUserCount} fleetManager={fleetManager} unconfirmedTailsCount={unconfirmedTailsCount} modifyTailsAccess={modifyTailsAccess} plotMapHidden={plotMapHidden}/>\n                <div className=\"card-body\" hidden={hidden}>\n\n                    <div className=\"card mb-1\" style={bgStyle}>\n                        <h5 className=\"card-header\" style={fgStyle}>\n                            Update Password\n                        </h5>\n\n                        <div className=\"card-body\" style={fgStyle}>\n\n                            <form onSubmit={(event) => this.updatePassword(event)} >\n\n                                <div className=\"form-group\" style={formGroupStyle}>\n\n                                    <div className=\"d-flex\">\n                                        <div className=\"p-2\" style={formHeaderStyle}>\n                                            <label htmlFor=\"createPassword\" style={labelStyle}>Current Password</label>\n                                        </div>\n                                        <div className=\"p-2 flex-fill\">\n                                            <input type=\"password\" className=\"form-control\" id=\"currentPassword\" placeholder=\"Password (required)\" required={true} onChange={(event) => {this.changeCurrentPassword(event)}} value={this.state.currentPassword}/>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"d-flex\">\n                                    <div className=\"p-2\" style={formHeaderStyle}>\n                                        <label htmlFor=\"createPassword\" style={labelStyle}>New Password</label>\n                                    </div>\n                                    <div className=\"p-2 flex-fill\">\n                                        <input type=\"password\" className=\"form-control\" id=\"newPassword\" placeholder=\"Password (required)\" required={true} onChange={(event) => {this.changeNewPassword(event)}} value={this.state.newPassword}/>\n                                    </div>\n                                    <div className=\"p-2 flex-fill\">\n                                        <input type=\"password\" className=\"form-control\" id=\"confirmPassword\" placeholder=\"Confirm password (required)\" required={true} onChange={(event) => {this.changeConfirmPassword(event)}} value={this.state.confirmPassword}/>\n                                    </div>\n                                </div>\n\n                                <div className=\"d-flex\">\n                                    <div className=\"p-2\" style={formHeaderStyle}>\n                                    </div>\n                                    <div className=\"p-2 flex-fill\">\n                                        <span style={validationMessageStyle} hidden={passwordValidationHidden}>{passwordValidationMessage}</span>\n                                    </div>\n                                    <div className=\"p-2\">\n                                        <button type=\"submit\" className=\"btn btn-primary float-right\" disabled={updatePasswordDisabled}>Update Password</button>\n                                    </div>\n                                </div>\n\n\n                            </form>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nvar passwordPage = ReactDOM.render(\n    <UpdatePasswordPage />,\n    document.querySelector('#password-page')\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;;IAGMC,kB;;;;;EACF,4BAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACf,0BAAMA,KAAN;IAEA,MAAKC,KAAL,GAAa;MACTC,eAAe,EAAG,EADT;MAETC,WAAW,EAAG,EAFL;MAGTC,eAAe,EAAG;IAHT,CAAb;IAHe;EAQlB;;;;WAED,0BAAiB;MACb,KAAKH,KAAL,GAAa;QACTC,eAAe,EAAG,EADT;QAETC,WAAW,EAAG,EAFL;QAGTC,eAAe,EAAG;MAHT,CAAb;MAMA,KAAKC,QAAL,CAAc,KAAKJ,KAAnB;IACH;;;WAED,wBAAeK,KAAf,EAAsB;MAClBA,KAAK,CAACC,cAAN;MAEA,IAAIC,cAAc,GAAG;QACjBN,eAAe,EAAG,KAAKD,KAAL,CAAWC,eADZ;QAEjBC,WAAW,EAAG,KAAKF,KAAL,CAAWE,WAFR;QAGjBC,eAAe,EAAG,KAAKH,KAAL,CAAWG;MAHZ,CAArB;MAOAK,CAAC,CAAC,UAAD,CAAD,CAAcC,IAAd;MAEAD,CAAC,CAACE,IAAF,CAAO;QACHC,IAAI,EAAE,MADH;QAEHC,GAAG,EAAE,4BAFF;QAGHC,IAAI,EAAGN,cAHJ;QAIHO,QAAQ,EAAG,MAJR;QAKHC,OAAO,EAAG,iBAASC,QAAT,EAAmB;UACzBC,OAAO,CAACC,GAAR,CAAY,qBAAZ;UACAD,OAAO,CAACC,GAAR,CAAYF,QAAZ;UAEAR,CAAC,CAAC,UAAD,CAAD,CAAcW,IAAd;;UAEA,IAAIH,QAAQ,CAACI,UAAb,EAAyB;YACrBH,OAAO,CAACC,GAAR,CAAY,yBAAZ;YACAtB,UAAU,CAACa,IAAX,CAAgBO,QAAQ,CAACI,UAAzB,EAAqCJ,QAAQ,CAACK,YAA9C;YACA,OAAO,KAAP;UACH;;UAEDC,WAAW,CAACC,cAAZ;QAEH,CAnBE;QAoBHC,KAAK,EAAG,eAASC,KAAT,EAAgBC,UAAhB,EAA4BC,WAA5B,EAAyC;UAC7C/B,UAAU,CAACa,IAAX,CAAgB,sCAAhB,EAAwDkB,WAAxD;QACH,CAtBE;QAuBHC,KAAK,EAAE;MAvBJ,CAAP;MA0BAX,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACH;;;WAED,+BAAsBb,KAAtB,EAA6B;MACzB,KAAKL,KAAL,CAAWC,eAAX,GAA6BI,KAAK,CAACwB,MAAN,CAAaC,KAA1C;MACA,KAAK1B,QAAL,CAAc,KAAKJ,KAAnB;IACH;;;WAED,2BAAkBK,KAAlB,EAAyB;MACrB,KAAKL,KAAL,CAAWE,WAAX,GAAyBG,KAAK,CAACwB,MAAN,CAAaC,KAAtC;MACA,KAAK1B,QAAL,CAAc,KAAKJ,KAAnB;IACH;;;WAED,+BAAsBK,KAAtB,EAA6B;MACzB,KAAKL,KAAL,CAAWG,eAAX,GAA6BE,KAAK,CAACwB,MAAN,CAAaC,KAA1C;MACA,KAAK1B,QAAL,CAAc,KAAKJ,KAAnB;IACH;;;WAED,kBAAS;MAAA;;MACL,IAAM+B,MAAM,GAAG,KAAKhC,KAAL,CAAWgC,MAA1B;MACA,IAAMC,OAAO,GAAG;QAACC,OAAO,EAAG;MAAX,CAAhB;MACA,IAAMC,OAAO,GAAG;QAACD,OAAO,EAAG;MAAX,CAAhB;MAEA,IAAIE,cAAc,GAAG;QACjBC,YAAY,EAAE;MADG,CAArB;MAIA,IAAIC,eAAe,GAAG;QAClBC,KAAK,EAAE,OADW;QAElBC,IAAI,EAAE;MAFY,CAAtB;MAKA,IAAIC,UAAU,GAAG;QACbC,OAAO,EAAG,SADG;QAEbC,MAAM,EAAG,GAFI;QAGbC,OAAO,EAAE,OAHI;QAIbC,SAAS,EAAE;MAJE,CAAjB;MAOA,IAAIC,sBAAsB,GAAG;QACzBJ,OAAO,EAAG,SADe;QAEzBC,MAAM,EAAG,GAFgB;QAGzBC,OAAO,EAAE,OAHgB;QAIzBC,SAAS,EAAE,MAJc;QAKzBE,KAAK,EAAE;MALkB,CAA7B;MAQA,IAAI7C,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;MACA,IAAIC,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA7B;MACA,IAAIC,eAAe,GAAG,KAAKH,KAAL,CAAWG,eAAjC,CA/BK,CAiCL;MACA;MACA;;MAEA,IAAI4C,EAAE,GAAG,8CAAT;MAEA,IAAIC,yBAAyB,GAAG,EAAhC;MACA,IAAIC,wBAAwB,GAAG,IAA/B;;MAEA,IAAIhD,eAAe,CAACiD,MAAhB,IAA0B,CAA9B,EAAiC;QAC7BF,yBAAyB,GAAG,qCAA5B;QACAC,wBAAwB,GAAG,KAA3B;MAEH,CAJD,MAIO,IAAIF,EAAE,CAACI,IAAH,CAAQlD,eAAR,KAA4BA,eAAe,CAACiD,MAAhB,GAAyB,EAAzD,EAA6D;QAChEF,yBAAyB,GAAG,yKAA5B;QACAC,wBAAwB,GAAG,KAA3B;MAEH,CAJM,MAIA,IAAI/C,WAAW,CAACgD,MAAZ,IAAsB,CAA1B,EAA6B;QAChCF,yBAAyB,GAAG,8BAA5B;QACAC,wBAAwB,GAAG,KAA3B;MAEH,CAJM,MAIA,IAAIF,EAAE,CAACI,IAAH,CAAQjD,WAAR,KAAwBA,WAAW,CAACgD,MAAZ,GAAqB,EAAjD,EAAqD;QACxDF,yBAAyB,GAAG,qKAA5B;QACAC,wBAAwB,GAAG,KAA3B;MAEH,CAJM,MAIA,IAAI9C,eAAe,CAAC+C,MAAhB,IAA0B,CAA9B,EAAiC;QACpCF,yBAAyB,GAAG,oCAA5B;QACAC,wBAAwB,GAAG,KAA3B;MAEH,CAJM,MAIA,IAAIF,EAAE,CAACI,IAAH,CAAQhD,eAAR,KAA4BA,eAAe,CAAC+C,MAAhB,GAAyB,EAAzD,EAA6D;QAChEF,yBAAyB,GAAG,8KAA5B;QACAC,wBAAwB,GAAG,KAA3B;MAEH,CAJM,MAIA,IAAIhD,eAAe,IAAIC,WAAvB,EAAoC;QACvC8C,yBAAyB,GAAG,+DAA5B;QACAC,wBAAwB,GAAG,KAA3B;MAEH,CAJM,MAIA,IAAI/C,WAAW,IAAIC,eAAnB,EAAoC;QACvC6C,yBAAyB,GAAG,8DAA5B;QACAC,wBAAwB,GAAG,KAA3B;MACH;;MAED,IAAIG,sBAAsB,GAAG,CAACH,wBAA9B;MAEAhC,OAAO,CAACC,GAAR,CAAY,kDAAkD8B,yBAAlD,GAA8E,qCAA9E,GAAsHC,wBAAlI;MAEA,oBACI,8CACI,oBAAC,cAAD;QAAgB,UAAU,EAAC,SAA3B;QAAqC,gBAAgB,EAAEI,gBAAvD;QAAyE,YAAY,EAAEC,YAAvF;QAAqG,qBAAqB,EAAEC,qBAA5H;QAAmJ,iBAAiB,EAAEC,iBAAtK;QAAyL,aAAa,EAAEC;MAAxM,EADJ,eAEI;QAAK,SAAS,EAAC,WAAf;QAA2B,MAAM,EAAE1B;MAAnC,gBAEI;QAAK,SAAS,EAAC,WAAf;QAA2B,KAAK,EAAEC;MAAlC,gBACI;QAAI,SAAS,EAAC,aAAd;QAA4B,KAAK,EAAEE;MAAnC,qBADJ,eAKI;QAAK,SAAS,EAAC,WAAf;QAA2B,KAAK,EAAEA;MAAlC,gBAEI;QAAM,QAAQ,EAAE,kBAAC7B,KAAD;UAAA,OAAW,MAAI,CAACqD,cAAL,CAAoBrD,KAApB,CAAX;QAAA;MAAhB,gBAEI;QAAK,SAAS,EAAC,YAAf;QAA4B,KAAK,EAAE8B;MAAnC,gBAEI;QAAK,SAAS,EAAC;MAAf,gBACI;QAAK,SAAS,EAAC,KAAf;QAAqB,KAAK,EAAEE;MAA5B,gBACI;QAAO,OAAO,EAAC,gBAAf;QAAgC,KAAK,EAAEG;MAAvC,sBADJ,CADJ,eAII;QAAK,SAAS,EAAC;MAAf,gBACI;QAAO,IAAI,EAAC,UAAZ;QAAuB,SAAS,EAAC,cAAjC;QAAgD,EAAE,EAAC,iBAAnD;QAAqE,WAAW,EAAC,qBAAjF;QAAuG,QAAQ,EAAE,IAAjH;QAAuH,QAAQ,EAAE,kBAACnC,KAAD,EAAW;UAAC,MAAI,CAACsD,qBAAL,CAA2BtD,KAA3B;QAAkC,CAA/K;QAAiL,KAAK,EAAE,KAAKL,KAAL,CAAWC;MAAnM,EADJ,CAJJ,CAFJ,CAFJ,eAcI;QAAK,SAAS,EAAC;MAAf,gBACI;QAAK,SAAS,EAAC,KAAf;QAAqB,KAAK,EAAEoC;MAA5B,gBACI;QAAO,OAAO,EAAC,gBAAf;QAAgC,KAAK,EAAEG;MAAvC,kBADJ,CADJ,eAII;QAAK,SAAS,EAAC;MAAf,gBACI;QAAO,IAAI,EAAC,UAAZ;QAAuB,SAAS,EAAC,cAAjC;QAAgD,EAAE,EAAC,aAAnD;QAAiE,WAAW,EAAC,qBAA7E;QAAmG,QAAQ,EAAE,IAA7G;QAAmH,QAAQ,EAAE,kBAACnC,KAAD,EAAW;UAAC,MAAI,CAACuD,iBAAL,CAAuBvD,KAAvB;QAA8B,CAAvK;QAAyK,KAAK,EAAE,KAAKL,KAAL,CAAWE;MAA3L,EADJ,CAJJ,eAOI;QAAK,SAAS,EAAC;MAAf,gBACI;QAAO,IAAI,EAAC,UAAZ;QAAuB,SAAS,EAAC,cAAjC;QAAgD,EAAE,EAAC,iBAAnD;QAAqE,WAAW,EAAC,6BAAjF;QAA+G,QAAQ,EAAE,IAAzH;QAA+H,QAAQ,EAAE,kBAACG,KAAD,EAAW;UAAC,MAAI,CAACwD,qBAAL,CAA2BxD,KAA3B;QAAkC,CAAvL;QAAyL,KAAK,EAAE,KAAKL,KAAL,CAAWG;MAA3M,EADJ,CAPJ,CAdJ,eA0BI;QAAK,SAAS,EAAC;MAAf,gBACI;QAAK,SAAS,EAAC,KAAf;QAAqB,KAAK,EAAEkC;MAA5B,EADJ,eAGI;QAAK,SAAS,EAAC;MAAf,gBACI;QAAM,KAAK,EAAEQ,sBAAb;QAAqC,MAAM,EAAEI;MAA7C,GAAwED,yBAAxE,CADJ,CAHJ,eAMI;QAAK,SAAS,EAAC;MAAf,gBACI;QAAQ,IAAI,EAAC,QAAb;QAAsB,SAAS,EAAC,6BAAhC;QAA8D,QAAQ,EAAEI;MAAxE,qBADJ,CANJ,CA1BJ,CAFJ,CALJ,CAFJ,CAFJ,CADJ;IAyDH;;;;EArN4B3D,KAAK,CAACC,S;;AAwNvC,IAAIoE,YAAY,GAAGnE,QAAQ,CAACoE,MAAT,eACf,oBAAC,kBAAD,OADe,EAEfC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAFe,CAAnB"}]}