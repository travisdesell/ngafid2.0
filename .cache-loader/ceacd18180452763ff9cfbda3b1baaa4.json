{"remainingRequest":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/babel-loader/lib/index.js??ref--4-1!/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/src/main/javascript/flights.js","dependencies":[{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/src/main/javascript/flights.js","mtime":1590175292290},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/.babelrc","mtime":1589665823083},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport 'bootstrap';\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport { errorModal } from \"./error_modal.js\";\nimport { navbar } from \"./signed_in_navbar.js\";\nimport { map, styles, layers, Colors } from \"./map.js\";\nimport { fromLonLat, toLonLat } from 'ol/proj.js';\nimport { Group, Vector as VectorLayer } from 'ol/layer.js';\nimport { Vector as VectorSource } from 'ol/source.js';\nimport { Circle, Fill, Icon, Stroke, Style } from 'ol/style.js';\nimport Draw from 'ol/interaction/Draw.js';\nimport Feature from 'ol/Feature.js';\nimport LineString from 'ol/geom/LineString.js';\nimport Point from 'ol/geom/Point.js';\nimport { Filter } from './filter.js';\n\nvar moment = require('moment');\n\nimport Plotly from 'plotly.js';\nvar plotlyLayout = {\n  shapes: []\n};\n/*\nvar airframes = [ \"PA-28-181\", \"Cessna 172S\", \"PA-44-180\", \"Cirrus SR20\"  ];\nvar tailNumbers = [ \"N765ND\", \"N744ND\", \"N771ND\", \"N731ND\", \"N714ND\", \"N766ND\", \"N743ND\" , \"N728ND\" , \"N768ND\" , \"N713ND\" , \"N732ND\", \"N718ND\" , \"N739ND\" ];\nvar doubleTimeSeriesNames = [ \"E1 CHT1\", \"E1 CHT2\", \"E1 CHT3\" ];\nvar visitedAirports = [ \"GFK\", \"FAR\", \"ALB\", \"ROC\" ];\n*/\n//save the event definitions after the first event load so we can reuse them and not\n//have to keep sending them from the server\n\nvar eventDefinitionsLoaded = false;\nvar eventDefinitions = null;\nvar rules = [{\n  name: \"Airframe\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"is\", \"is not\"]\n  }, {\n    type: \"select\",\n    name: \"airframes\",\n    options: airframes\n  }]\n}, {\n  name: \"Tail Number\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"is\", \"is not\"]\n  }, {\n    type: \"select\",\n    name: \"tail numbers\",\n    options: tailNumbers\n  }]\n}, {\n  name: \"Duration\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"number\",\n    name: \"hours\"\n  }, {\n    type: \"number\",\n    name: \"minutes\"\n  }, {\n    type: \"number\",\n    name: \"seconds\"\n  }]\n}, {\n  name: \"Start Date and Time\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"datetime-local\",\n    name: \"date and time\"\n  }]\n}, {\n  name: \"End Date and Time\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"datetime-local\",\n    name: \"date and time\"\n  }]\n}, {\n  name: \"Start Date\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"date\",\n    name: \"date\"\n  }]\n}, {\n  name: \"End Date\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"date\",\n    name: \"date\"\n  }]\n}, {\n  name: \"Start Time\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"time\",\n    name: \"time\"\n  }]\n}, {\n  name: \"End Time\",\n  conditions: [{\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"time\",\n    name: \"time\"\n  }]\n}, {\n  name: \"Parameter\",\n  conditions: [{\n    type: \"select\",\n    name: \"statistic\",\n    options: [\"min\", \"avg\", \"max\"]\n  }, {\n    type: \"select\",\n    name: \"doubleSeries\",\n    options: doubleTimeSeriesNames\n  }, {\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"number\",\n    name: \"number\"\n  }]\n}, {\n  name: \"Airport\",\n  conditions: [{\n    type: \"select\",\n    name: \"airports\",\n    options: visitedAirports\n  }, {\n    type: \"select\",\n    name: \"condition\",\n    options: [\"visited\", \"not visited\"]\n  }]\n}, {\n  name: \"Runway\",\n  conditions: [{\n    type: \"select\",\n    name: \"runways\",\n    options: visitedRunways\n  }, {\n    type: \"select\",\n    name: \"condition\",\n    options: [\"visited\", \"not visited\"]\n  }]\n}, {\n  name: \"Event Count\",\n  conditions: [{\n    type: \"select\",\n    name: \"eventNames\",\n    options: eventNames\n  }, {\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"number\",\n    name: \"number\"\n  }]\n}, {\n  name: \"Event Severity\",\n  conditions: [{\n    type: \"select\",\n    name: \"eventNames\",\n    options: eventNames\n  }, {\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"number\",\n    name: \"number\"\n  }]\n}, {\n  name: \"Event Duration\",\n  conditions: [{\n    type: \"select\",\n    name: \"eventNames\",\n    options: eventNames\n  }, {\n    type: \"select\",\n    name: \"condition\",\n    options: [\"<=\", \"<\", \"=\", \">\", \">=\"]\n  }, {\n    type: \"number\",\n    name: \"number\"\n  }]\n}];\n\nvar Itinerary =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Itinerary, _React$Component);\n\n  function Itinerary(props) {\n    var _this;\n\n    _classCallCheck(this, Itinerary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Itinerary).call(this, props));\n    _this.state = {\n      color: _this.props.color\n    };\n    return _this;\n  }\n\n  _createClass(Itinerary, [{\n    key: \"itineraryClicked\",\n    value: function itineraryClicked(index) {\n      flightsCard.showMap();\n      var stop = this.props.itinerary[index];\n      var modifiedIndex = parseInt(stop.minAltitudeIndex) - this.props.nanOffset; //console.log(\"index: \" + stop.minAltitudeIndex + \", nanOffset: \" + this.props.nanOffset + \", modifeid_index: \" + modifiedIndex);\n\n      var latlon = this.props.coordinates[modifiedIndex]; //console.log(latlon);\n\n      var coords = fromLonLat(latlon);\n      map.getView().animate({\n        center: coords,\n        zoom: 13\n      });\n    }\n  }, {\n    key: \"changeColor\",\n    value: function changeColor(event) {\n      this.setState({\n        color: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cellClasses = \"d-flex flex-row p-1\";\n      var cellStyle = {\n        \"overflowX\": \"auto\"\n      };\n      var buttonClasses = \"m-1 btn btn-outline-secondary\";\n      var styleButton = {\n        flex: \"0 0 10em\"\n      };\n      /*\n      let cellClasses = \"p-1 card mr-1 flex-fill\"\n      let itinerary = this.props.itinerary;\n      let result = \"\";\n      for (let i = 0; i < itinerary.length; i++) {\n          result += itinerary[i].airport + \" (\" + itinerary[i].runway + \")\";\n          if (i != (itinerary.length - 1)) result += \" => \";\n      }\n      */\n\n      return React.createElement(\"div\", null, React.createElement(\"b\", {\n        className: \"p-1\",\n        style: {\n          marginBottom: \"0\"\n        }\n      }, \"Itinerary:\"), React.createElement(\"div\", {\n        className: cellClasses,\n        style: cellStyle\n      }, React.createElement(\"div\", {\n        style: {\n          flex: \"0 0\"\n        }\n      }, React.createElement(\"input\", {\n        type: \"color\",\n        name: \"itineraryColor\",\n        value: this.state.color,\n        onChange: function onChange(event) {\n          _this2.changeColor(event);\n\n          _this2.props.flightColorChange(_this2.props.parent, event);\n        },\n        style: {\n          padding: \"3 2 3 2\",\n          border: \"1\",\n          margin: \"5 4 4 0\",\n          height: \"36px\",\n          width: \"36px\"\n        }\n      })), this.props.itinerary.map(function (stop, index) {\n        var identifier = stop.airport;\n        if (stop.runway != null) identifier += \" (\" + stop.runway + \")\";\n        return React.createElement(\"button\", {\n          className: buttonClasses,\n          key: index,\n          style: styleButton,\n          onClick: function onClick() {\n            return _this2.itineraryClicked(index);\n          }\n        }, identifier);\n      })));\n    }\n  }]);\n\n  return Itinerary;\n}(React.Component);\n\nvar TraceButtons =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(TraceButtons, _React$Component2);\n\n  function TraceButtons(props) {\n    var _this3;\n\n    _classCallCheck(this, TraceButtons);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(TraceButtons).call(this, props));\n    _this3.state = {\n      parentFlight: _this3.props.parentFlight\n    };\n    return _this3;\n  }\n\n  _createClass(TraceButtons, [{\n    key: \"traceClicked\",\n    value: function traceClicked(seriesName) {\n      flightsCard.showPlot();\n      var parentFlight = this.state.parentFlight; //check to see if we've already loaded this time series\n\n      if (!(seriesName in parentFlight.state.traceIndex)) {\n        var thisTrace = this;\n        console.log(seriesName);\n        console.log(\"seriesName: \" + seriesName + \", flightId: \" + this.props.flightId);\n        var submissionData = {\n          request: \"GET_DOUBLE_SERIES\",\n          id_token: \"TEST_ID_TOKEN\",\n          //id_token : id_token,\n          //user_id : user_id\n          user_id: 1,\n          flightId: this.props.flightId,\n          seriesName: seriesName\n        };\n        $.ajax({\n          type: 'POST',\n          url: '/protected/double_series',\n          data: submissionData,\n          dataType: 'json',\n          success: function success(response) {\n            console.log(\"received response: \");\n            console.log(response);\n            var trace = {\n              x: response.x,\n              y: response.y,\n              mode: \"lines\",\n              //marker : { size: 1},\n              name: thisTrace.props.flightId + \" - \" + seriesName //set the trace number for this series\n\n            };\n            parentFlight.state.traceIndex[seriesName] = $(\"#plot\")[0].data.length;\n            parentFlight.state.traceVisibility[seriesName] = true;\n            parentFlight.setState(parentFlight.state);\n            Plotly.addTraces('plot', [trace]);\n          },\n          error: function error(jqXHR, textStatus, errorThrown) {\n            errorModal.show(\"Error Loading Flight Coordinates\", errorThrown);\n          },\n          async: true\n        });\n      } else {\n        //toggle visibility for this series\n        var visibility = !parentFlight.state.traceVisibility[seriesName];\n        parentFlight.state.traceVisibility[seriesName] = visibility;\n        parentFlight.setState(parentFlight.state);\n        console.log(\"toggled visibility to: \" + visibility);\n        Plotly.restyle('plot', {\n          visible: visibility\n        }, [parentFlight.state.traceIndex[seriesName]]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var cellClasses = \"d-flex flex-row p-1\";\n      var cellStyle = {\n        \"overflowX\": \"auto\"\n      };\n      var buttonClasses = \"m-1 btn btn-outline-secondary\";\n      var styleButton = {\n        flex: \"0 0 10em\"\n      };\n      var parentFlight = this.state.parentFlight;\n      return React.createElement(\"div\", null, React.createElement(\"b\", {\n        className: \"p-1\",\n        style: {\n          marginBottom: \"0\"\n        }\n      }, \"Flight Parameters:\"), React.createElement(\"div\", {\n        className: cellClasses,\n        style: cellStyle\n      }, parentFlight.state.commonTraceNames.map(function (traceName, index) {\n        var ariaPressed = parentFlight.state.traceVisibility[traceName];\n        var active = \"\";\n        if (ariaPressed) active = \" active\";\n        return React.createElement(\"button\", {\n          className: buttonClasses + active,\n          key: traceName,\n          style: styleButton,\n          \"data-toggle\": \"button\",\n          \"aria-pressed\": ariaPressed,\n          onClick: function onClick() {\n            return _this4.traceClicked(traceName);\n          }\n        }, traceName);\n      })), React.createElement(\"div\", {\n        className: cellClasses,\n        style: cellStyle\n      }, parentFlight.state.uncommonTraceNames.map(function (traceName, index) {\n        var ariaPressed = parentFlight.state.traceVisibility[traceName];\n        var active = \"\";\n        if (ariaPressed) active = \" active\";\n        return React.createElement(\"button\", {\n          className: buttonClasses + active,\n          key: traceName,\n          style: styleButton,\n          \"data-toggle\": \"button\",\n          \"aria-pressed\": ariaPressed,\n          onClick: function onClick() {\n            return _this4.traceClicked(traceName);\n          }\n        }, traceName);\n      })));\n    }\n  }]);\n\n  return TraceButtons;\n}(React.Component);\n\nvar Events =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Events, _React$Component3);\n\n  function Events(props) {\n    var _this5;\n\n    _classCallCheck(this, Events);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Events).call(this, props));\n    console.log(\"constructing Events, props.events:\");\n    console.log(props.events);\n    var definitionsPresent = [];\n\n    for (var i = 0; i < props.events.length; i++) {\n      if (!definitionsPresent.includes(props.events[i].eventDefinition)) {\n        definitionsPresent.push(props.events[i].eventDefinition);\n      }\n\n      props.events[i].color = Colors.randomValue();\n    }\n\n    _this5.state = {\n      events: props.events,\n      definitions: definitionsPresent\n    };\n    return _this5;\n  }\n\n  _createClass(Events, [{\n    key: \"updateEventDisplay\",\n    value: function updateEventDisplay(index, toggle) {\n      var event = this.state.events[index];\n      console.log(\"drawing plotly rectangle from \" + event.startLine + \" to \" + event.endLine);\n      var shapes = plotlyLayout.shapes;\n      var update = {\n        id: event.id,\n        type: 'rect',\n        // x-reference is assigned to the x-values\n        xref: 'x',\n        // y-reference is assigned to the plot paper [0,1]\n        yref: 'paper',\n        x0: event.startLine - 1,\n        y0: 0,\n        x1: event.endLine + 1,\n        y1: 1,\n        fillcolor: event.color,\n        'opacity': 0.5,\n        line: {\n          'width': 0\n        }\n      };\n      var found = false;\n\n      for (var i = 0; i < shapes.length; i++) {\n        if (shapes[i].id == event.id) {\n          if (toggle) {\n            shapes = shapes.splice(i, 1);\n          } else {\n            shapes[i] = update;\n            found = true;\n            break;\n          }\n        }\n      }\n\n      if (!found && toggle) {\n        shapes.push(update);\n      }\n\n      Plotly.relayout('plot', plotlyLayout);\n    }\n  }, {\n    key: \"changeColor\",\n    value: function changeColor(e, index) {\n      this.state.events[index].color = e.target.value;\n      this.setState({\n        events: this.state.events\n      });\n      this.updateEventDisplay(index, false);\n    }\n  }, {\n    key: \"eventClicked\",\n    value: function eventClicked(index) {\n      this.updateEventDisplay(index, true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var cellClasses = \"d-flex flex-row p-1\";\n      var cellStyle = {\n        \"overflowX\": \"auto\"\n      };\n      var buttonClasses = \"m-1 btn btn-outline-secondary\";\n      var styleButton = {\n        flex: \"0 0 10em\"\n      };\n      return React.createElement(\"div\", null, React.createElement(\"b\", {\n        className: \"p-1\",\n        style: {\n          marginBottom: \"0\"\n        }\n      }, \"Events:\"), this.state.events.map(function (event, index) {\n        return React.createElement(\"div\", {\n          className: cellClasses,\n          style: cellStyle,\n          key: index\n        }, React.createElement(\"div\", {\n          style: {\n            flex: \"0 0\"\n          }\n        }, React.createElement(\"input\", {\n          type: \"color\",\n          name: \"eventColor\",\n          value: event.color,\n          onChange: function onChange(e) {\n            _this6.changeColor(e, index);\n          },\n          style: {\n            padding: \"3 2 3 2\",\n            border: \"1\",\n            margin: \"5 4 4 0\",\n            height: \"36px\",\n            width: \"36px\"\n          }\n        })), React.createElement(\"button\", {\n          className: buttonClasses,\n          style: styleButton,\n          \"data-toggle\": \"button\",\n          \"aria-pressed\": \"false\",\n          onClick: function onClick() {\n            return _this6.eventClicked(index);\n          }\n        }, React.createElement(\"b\", null, event.eventDefinition.name), \" \", \" -- \" + event.startTime + \" to \" + event.endTime));\n      }));\n    }\n  }]);\n\n  return Events;\n}(React.Component);\n\nvar Flight =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(Flight, _React$Component4);\n\n  function Flight(props) {\n    var _this7;\n\n    _classCallCheck(this, Flight);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(Flight).call(this, props));\n    var color = Colors.randomValue();\n    console.log(\"flight color: \");\n    console.log(color);\n    _this7.state = {\n      pathVisible: false,\n      mapLoaded: false,\n      eventsLoaded: false,\n      commonTraceNames: null,\n      uncommonTraceNames: null,\n      traceIndex: [],\n      traceVisibility: [],\n      traceNamesVisible: false,\n      eventsVisible: false,\n      itineraryVisible: false,\n      layer: null,\n      color: color\n    };\n    return _this7;\n  }\n\n  _createClass(Flight, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"unmounting:\");\n      console.log(this.props.flightInfo);\n      if (this.props.flightInfo.has_coords === \"0\") return;\n      console.log(\"hiding flight path\");\n      this.state.pathVisible = false;\n      this.state.itineraryVisible = false;\n\n      if (this.state.layer) {\n        this.state.layer.setVisible(false);\n      }\n\n      console.log(\"hiding plots\");\n\n      if (this.state.commonTraceNames) {\n        var visible = false;\n\n        for (var i = 0; i < this.state.commonTraceNames.length; i++) {\n          var seriesName = this.state.commonTraceNames[i];\n\n          if (seriesName in this.state.traceIndex) {\n            //this will make make a trace visible if it was formly set to visible and the plot button this flight is clicked on\n            //otherwise it will hide them\n            Plotly.restyle('plot', {\n              visible: visible && this.state.traceVisibility[seriesName]\n            }, [this.state.traceIndex[seriesName]]);\n          }\n        }\n\n        for (var _i = 0; _i < this.state.uncommonTraceNames.length; _i++) {\n          var _seriesName = this.state.uncommonTraceNames[_i];\n\n          if (_seriesName in this.state.traceIndex) {\n            //this will make make a trace visible if it was formly set to visible and the plot button this flight is clicked on\n            //otherwise it will hide them\n            Plotly.restyle('plot', {\n              visible: visible && this.state.traceVisibility[_seriesName]\n            }, [this.state.traceIndex[_seriesName]]);\n          }\n        }\n      }\n\n      this.state.traceNamesVisible = false;\n    }\n  }, {\n    key: \"plotClicked\",\n    value: function plotClicked() {\n      if (this.state.commonTraceNames == null) {\n        var thisFlight = this;\n        var submissionData = {\n          request: \"GET_DOUBLE_SERIES_NAMES\",\n          id_token: \"TEST_ID_TOKEN\",\n          //id_token : id_token,\n          //user_id : user_id\n          user_id: 1,\n          flightId: this.props.flightInfo.id\n        };\n        $.ajax({\n          type: 'POST',\n          url: '/protected/double_series_names',\n          data: submissionData,\n          dataType: 'json',\n          success: function success(response) {\n            console.log(\"received response: \");\n            console.log(response);\n            var names = response.names;\n            /*\n             * Do these common trace parameters first:\n             * Altitiude AGL\n             * Altitude MSL\n             * E1 MAP\n             * E2 MAP\n             * E1 RPM\n             * E2 RPM\n             * IAS\n             * Normal Acceleration\n             * Pitch\n             * Roll\n             * Vertical Speed\n             */\n\n            var preferredNames = [\"AltAGL\", \"AltMSL\", \"E1 MAP\", \"E2 MAP\", \"E1 RPM\", \"E2 RPM\", \"IAS\", \"NormAc\", \"Pitch\", \"Roll\", \"VSpd\"];\n            var commonTraceNames = [];\n            var uncommonTraceNames = [];\n\n            for (var i = 0; i < response.names.length; i++) {\n              var name = response.names[i]; //console.log(name);\n\n              if (preferredNames.includes(name)) {\n                commonTraceNames.push(name);\n              } else {\n                uncommonTraceNames.push(name);\n              }\n            } //set the trace number for this series\n\n\n            thisFlight.state.commonTraceNames = commonTraceNames;\n            thisFlight.state.uncommonTraceNames = uncommonTraceNames;\n            thisFlight.state.traceNamesVisible = true;\n            thisFlight.setState(thisFlight.state);\n          },\n          error: function error(jqXHR, textStatus, errorThrown) {\n            this.state.commonTraceNames = null;\n            this.state.uncommonTraceNames = null;\n            errorModal.show(\"Error Getting Potentail Plot Parameters\", errorThrown);\n          },\n          async: true\n        });\n      } else {\n        var visible = !this.state.traceNamesVisible;\n\n        for (var i = 0; i < this.state.commonTraceNames.length; i++) {\n          var seriesName = this.state.commonTraceNames[i]; //check and see if this series was loaded in the past\n\n          if (seriesName in this.state.traceIndex) {\n            //this will make make a trace visible if it was formly set to visible and the plot button this flight is clicked on\n            //otherwise it will hide them\n            Plotly.restyle('plot', {\n              visible: visible && this.state.traceVisibility[seriesName]\n            }, [this.state.traceIndex[seriesName]]);\n          }\n        }\n\n        for (var _i2 = 0; _i2 < this.state.uncommonTraceNames.length; _i2++) {\n          var _seriesName2 = this.state.uncommonTraceNames[_i2]; //check and see if this series was loaded in the past\n\n          if (_seriesName2 in this.state.traceIndex) {\n            //this will make make a trace visible if it was formly set to visible and the plot button this flight is clicked on\n            //otherwise it will hide them\n            Plotly.restyle('plot', {\n              visible: visible && this.state.traceVisibility[_seriesName2]\n            }, [this.state.traceIndex[_seriesName2]]);\n          }\n        }\n\n        this.state.traceNamesVisible = !this.state.traceNamesVisible;\n        this.setState(this.state);\n      }\n    }\n  }, {\n    key: \"flightColorChange\",\n    value: function flightColorChange(target, event) {\n      console.log(\"trace color changed!\");\n      console.log(event);\n      console.log(event.target);\n      console.log(event.target.value);\n      var color = event.target.value;\n      target.state.color = color;\n      console.log(target);\n      console.log(target.state);\n      target.state.layer.setStyle(new Style({\n        stroke: new Stroke({\n          color: color,\n          width: 1.5\n        })\n      }));\n    }\n  }, {\n    key: \"downloadClicked\",\n    value: function downloadClicked(type) {\n      if (type == 'KML') {\n        window.open(\"/protected/get_kml?flight_id=\" + this.props.flightInfo.id);\n      } else if (type == \"XPL\") {\n        window.open(\"/protected/get_xplane?flight_id=\" + this.props.flightInfo.id);\n      }\n    }\n  }, {\n    key: \"exclamationClicked\",\n    value: function exclamationClicked() {\n      console.log(\"exclamation clicked!\");\n\n      if (!this.state.eventsLoaded) {\n        console.log(\"loading events!\");\n        this.state.eventsLoaded = true;\n        this.state.eventsVisible = true;\n        var thisFlight = this;\n        var submissionData = {\n          flightId: this.props.flightInfo.id,\n          eventDefinitionsLoaded: eventDefinitionsLoaded\n        };\n        $.ajax({\n          type: 'POST',\n          url: '/protected/events',\n          data: submissionData,\n          dataType: 'json',\n          success: function success(response) {\n            console.log(\"received response: \");\n            console.log(response);\n\n            if (!eventDefinitionsLoaded) {\n              eventDefinitions = response.definitions;\n              eventDefinitionsLoaded = true;\n            }\n\n            var events = response.events;\n\n            for (var i = 0; i < events.length; i++) {\n              for (var j = 0; j < eventDefinitions.length; j++) {\n                if (events[i].eventDefinitionId == eventDefinitions[j].id) {\n                  events[i].eventDefinition = eventDefinitions[j];\n                  console.log(\"set events[\" + i + \"].eventDefinition to:\");\n                  console.log(events[i].eventDefinition);\n                }\n              }\n            }\n\n            thisFlight.state.events = events;\n            thisFlight.setState(thisFlight.state);\n          },\n          error: function error(jqXHR, textStatus, errorThrown) {\n            thisFlight.state.mapLoaded = false;\n            thisFlight.setState(thisFlight.state);\n            errorModal.show(\"Error Loading Flight Coordinates\", errorThrown);\n          },\n          async: true\n        });\n      } else {\n        console.log(\"events already loaded!\"); //toggle visibility if already loaded\n\n        this.state.eventsVisible = !this.state.eventsVisible;\n        this.setState(this.state);\n      }\n    }\n  }, {\n    key: \"cesiumClicked\",\n    value: function cesiumClicked() {\n      window.open(\"/protected/ngafid_cesium?flight_id=\" + this.props.flightInfo.id);\n    }\n  }, {\n    key: \"globeClicked\",\n    value: function globeClicked() {\n      if (this.props.flightInfo.has_coords === \"0\") return;\n\n      if (!this.state.mapLoaded) {\n        flightsCard.showMap();\n        this.state.mapLoaded = true;\n        var thisFlight = this;\n        var submissionData = {\n          request: \"GET_COORDINATES\",\n          id_token: \"TEST_ID_TOKEN\",\n          //id_token : id_token,\n          //user_id : user_id\n          user_id: 1,\n          flightId: this.props.flightInfo.id\n        };\n        $.ajax({\n          type: 'POST',\n          url: '/protected/coordinates',\n          data: submissionData,\n          dataType: 'json',\n          success: function success(response) {\n            //console.log(\"received response: \");\n            //console.log(response);\n            var coordinates = response.coordinates;\n            var points = [];\n\n            for (var i = 0; i < coordinates.length; i++) {\n              var point = fromLonLat(coordinates[i]);\n              points.push(point);\n            }\n\n            var color = thisFlight.state.color;\n            console.log(color);\n            thisFlight.state.trackingPoint = new Feature({\n              geometry: new Point(points[0]),\n              name: 'TrackingPoint'\n            });\n            thisFlight.state.layer = new VectorLayer({\n              style: new Style({\n                stroke: new Stroke({\n                  color: color,\n                  width: 1.5\n                }),\n                image: new Circle({\n                  radius: 5,\n                  //fill: new Fill({color: [0, 0, 0, 255]}),\n                  stroke: new Stroke({\n                    color: [0, 0, 0, 0],\n                    width: 2\n                  })\n                })\n              }),\n              source: new VectorSource({\n                features: [new Feature({\n                  geometry: new LineString(points),\n                  name: 'Line'\n                }), thisFlight.state.trackingPoint]\n              })\n            });\n            thisFlight.state.layer.flightState = thisFlight;\n            thisFlight.state.layer.setVisible(true);\n            thisFlight.state.pathVisible = true;\n            thisFlight.state.itineraryVisible = true;\n            thisFlight.state.nanOffset = response.nanOffset;\n            thisFlight.state.coordinates = response.coordinates;\n            thisFlight.state.points = points;\n            map.addLayer(thisFlight.state.layer);\n            var extent = thisFlight.state.layer.getSource().getExtent();\n            console.log(extent);\n            map.getView().fit(extent, map.getSize());\n            thisFlight.setState(thisFlight.state);\n          },\n          error: function error(jqXHR, textStatus, errorThrown) {\n            thisFlight.state.mapLoaded = false;\n            thisFlight.setState(thisFlight.state);\n            errorModal.show(\"Error Loading Flight Coordinates\", errorThrown);\n          },\n          async: true\n        });\n      } else {\n        //toggle visibility if already loaded\n        this.state.pathVisible = !this.state.pathVisible;\n        this.state.itineraryVisible = !this.state.itineraryVisible;\n        this.state.layer.setVisible(this.state.pathVisible);\n\n        if (this.state.pathVisibile) {\n          flightsCard.showMap();\n        }\n\n        this.setState(this.state);\n\n        if (this.state.pathVisible) {\n          var extent = this.state.layer.getSource().getExtent();\n          console.log(extent);\n          map.getView().fit(extent, map.getSize());\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n\n      var buttonClasses = \"p-1 mr-1 expand-import-button btn btn-outline-secondary\";\n      var lastButtonClasses = \"p-1 expand-import-button btn btn-outline-secondary\";\n      var styleButton = {};\n      var firstCellClasses = \"p-1 card mr-1\";\n      var cellClasses = \"p-1 card mr-1\";\n      var flightInfo = this.props.flightInfo;\n      var startTime = moment(flightInfo.startDateTime);\n      var endTime = moment(flightInfo.endDateTime);\n      var globeClasses = \"\";\n      var globeTooltip = \"\"; //console.log(flightInfo);\n\n      if (!flightInfo.hasCoords) {\n        //console.log(\"flight \" + flightInfo.id + \" doesn't have coords!\");\n        globeClasses += \" disabled\";\n        globeTooltip = \"Cannot display flight on the map because the flight data did not have latitude/longitude.\";\n      } else {\n        globeTooltip = \"Click the globe to display the flight on the map.\";\n      }\n\n      var visitedAirports = [];\n\n      for (var i = 0; i < flightInfo.itinerary.length; i++) {\n        if ($.inArray(flightInfo.itinerary[i].airport, visitedAirports) < 0) {\n          visitedAirports.push(flightInfo.itinerary[i].airport);\n        }\n      }\n\n      var itineraryRow = \"\";\n\n      if (this.state.itineraryVisible) {\n        itineraryRow = React.createElement(Itinerary, {\n          itinerary: flightInfo.itinerary,\n          color: this.state.color,\n          coordinates: this.state.coordinates,\n          nanOffset: this.state.nanOffset,\n          parent: this,\n          flightColorChange: this.flightColorChange\n        });\n      }\n\n      var eventsRow = \"\";\n\n      if (this.state.eventsVisible) {\n        eventsRow = React.createElement(Events, {\n          events: this.state.events,\n          parent: this\n        });\n      }\n\n      var tracesRow = \"\";\n\n      if (this.state.traceNamesVisible) {\n        tracesRow = React.createElement(TraceButtons, {\n          parentFlight: this,\n          flightId: flightInfo.id\n        });\n      }\n\n      var dropDownLinkStyle = {\n        color: 'white'\n      };\n      return React.createElement(\"div\", {\n        className: \"card mb-1\"\n      }, React.createElement(\"div\", {\n        className: \"card-body m-0 p-0\"\n      }, React.createElement(\"div\", {\n        className: \"d-flex flex-row p-1\"\n      }, React.createElement(\"div\", {\n        className: firstCellClasses,\n        style: {\n          flexBasis: \"100px\",\n          flexShrink: 0,\n          flexGrow: 0\n        }\n      }, React.createElement(\"i\", {\n        className: \"fa fa-plane p-1\"\n      }, \" \", flightInfo.id)), React.createElement(\"div\", {\n        className: cellClasses,\n        style: {\n          flexBasis: \"100px\",\n          flexShrink: 0,\n          flexGrow: 0\n        }\n      }, flightInfo.tailNumber), React.createElement(\"div\", {\n        className: cellClasses,\n        style: {\n          flexBasis: \"120px\",\n          flexShrink: 0,\n          flexGrow: 0\n        }\n      }, flightInfo.airframeType), React.createElement(\"div\", {\n        className: cellClasses,\n        style: {\n          flexBasis: \"200px\",\n          flexShrink: 0,\n          flexGrow: 0\n        }\n      }, flightInfo.startDateTime), React.createElement(\"div\", {\n        className: cellClasses,\n        style: {\n          flexBasis: \"200px\",\n          flexShrink: 0,\n          flexGrow: 0\n        }\n      }, flightInfo.endDateTime), React.createElement(\"div\", {\n        className: cellClasses,\n        style: {\n          flexBasis: \"80px\",\n          flexShrink: 0,\n          flexGrow: 0\n        }\n      }, moment.utc(endTime.diff(startTime)).format(\"HH:mm:ss\")), React.createElement(\"div\", {\n        className: cellClasses,\n        style: {\n          flexGrow: 1\n        }\n      }, visitedAirports.join(\", \")), React.createElement(\"div\", {\n        className: \"p-0\"\n      }, React.createElement(\"button\", {\n        className: buttonClasses,\n        \"data-toggle\": \"button\",\n        \"aria-pressed\": \"false\",\n        style: styleButton,\n        onClick: function onClick() {\n          return _this8.exclamationClicked();\n        }\n      }, React.createElement(\"i\", {\n        className: \"fa fa-exclamation p-1\"\n      })), React.createElement(\"button\", {\n        className: buttonClasses + globeClasses,\n        \"data-toggle\": \"button\",\n        title: globeTooltip,\n        \"aria-pressed\": \"false\",\n        style: styleButton,\n        onClick: function onClick() {\n          return _this8.globeClicked();\n        }\n      }, React.createElement(\"i\", {\n        className: \"fa fa-map-o p-1\"\n      })), React.createElement(\"button\", {\n        className: buttonClasses,\n        style: styleButton,\n        \"data-toggle\": \"button\",\n        \"aria-pressed\": \"false\",\n        onClick: function onClick() {\n          return _this8.plotClicked();\n        }\n      }, React.createElement(\"i\", {\n        className: \"fa fa-area-chart p-1\"\n      })), React.createElement(\"button\", {\n        className: buttonClasses + globeClasses,\n        style: styleButton,\n        onClick: function onClick() {\n          return _this8.cesiumClicked();\n        }\n      }, React.createElement(\"i\", {\n        className: \"fa fa-globe p-1\"\n      })), React.createElement(\"button\", {\n        className: buttonClasses + \" disabled\",\n        style: styleButton,\n        onClick: function onClick() {\n          return _this8.replayClicked();\n        }\n      }, React.createElement(\"i\", {\n        className: \"fa fa-video-camera p-1\"\n      })), React.createElement(DropdownButton, {\n        className: buttonClasses,\n        id: \"dropdown-item-button\",\n        title: \"Export\",\n        size: \"sm\",\n        style: styleButton,\n        variant: \"secondary\"\n      }, React.createElement(Dropdown.Item, {\n        onClick: function onClick() {\n          return _this8.downloadClicked('KML');\n        }\n      }, \"Export to KML\"), React.createElement(Dropdown.Item, {\n        onClick: function onClick() {\n          return _this8.downloadClicked('XPL');\n        }\n      }, \"Export to X-Plane\")))), itineraryRow, eventsRow, tracesRow));\n    }\n  }]);\n\n  return Flight;\n}(React.Component);\n\nvar FlightsCard =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(FlightsCard, _React$Component5);\n\n  function FlightsCard(props) {\n    var _this9;\n\n    _classCallCheck(this, FlightsCard);\n\n    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(FlightsCard).call(this, props));\n    _this9.state = {\n      mapVisible: false,\n      plotVisible: false,\n      filterVisible: true,\n      page: 0,\n      buffSize: 10,\n      //def size of flights to show per page is 10\n      numPages: 0\n    };\n    _this9.previousPage = _this9.previousPage.bind(_assertThisInitialized(_this9));\n    _this9.nextPage = _this9.nextPage.bind(_assertThisInitialized(_this9));\n    _this9.repaginate = _this9.repaginate.bind(_assertThisInitialized(_this9));\n    _this9.filterRef = React.createRef();\n    return _this9;\n  }\n\n  _createClass(FlightsCard, [{\n    key: \"setFlights\",\n    value: function setFlights(flights) {\n      this.state.flights = flights;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"setIndex\",\n    value: function setIndex(index) {\n      this.state.page = index;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.state.numPages = size;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"mapSelectChanged\",\n    value: function mapSelectChanged(style) {\n      //layers and styles from plots.js\n      for (var i = 0, ii = layers.length; i < ii; ++i) {\n        console.log(\"setting layer \" + i + \" to:\" + (styles[i] === style));\n        layers[i].setVisible(styles[i] === style);\n      }\n    }\n  }, {\n    key: \"showMap\",\n    value: function showMap() {\n      if (this.state.mapVisible) return;\n\n      if (!$(\"#map-toggle-button\").hasClass(\"active\")) {\n        $(\"#map-toggle-button\").addClass(\"active\");\n        $(\"#map-toggle-button\").attr(\"aria-pressed\", true);\n      }\n\n      this.state.mapVisible = true;\n      this.setState(this.state);\n      $(\"#plot-map-div\").css(\"height\", \"50%\");\n      $(\"#map\").show();\n\n      if (this.state.plotVisible) {\n        $(\"#map\").css(\"width\", \"50%\");\n        map.updateSize();\n        $(\"#plot\").css(\"width\", \"50%\");\n        Plotly.Plots.resize(\"plot\");\n      } else {\n        $(\"#map\").css(\"width\", \"100%\");\n        map.updateSize();\n      }\n    }\n  }, {\n    key: \"hideMap\",\n    value: function hideMap() {\n      if (!this.state.mapVisible) return;\n\n      if ($(\"#map-toggle-button\").hasClass(\"active\")) {\n        $(\"#map-toggle-button\").removeClass(\"active\");\n        $(\"#map-toggle-button\").attr(\"aria-pressed\", false);\n      }\n\n      this.state.mapVisible = false;\n      this.setState(this.state);\n      $(\"#map\").hide();\n\n      if (this.state.plotVisible) {\n        $(\"#plot\").css(\"width\", \"100%\");\n        var update = {\n          width: \"100%\"\n        };\n        Plotly.Plots.resize(\"plot\");\n      } else {\n        $(\"#plot-map-div\").css(\"height\", \"0%\");\n      }\n    }\n  }, {\n    key: \"toggleMap\",\n    value: function toggleMap() {\n      if (this.state.mapVisible) {\n        this.hideMap();\n      } else {\n        this.showMap();\n      }\n    }\n  }, {\n    key: \"showPlot\",\n    value: function showPlot() {\n      if (this.state.plotVisible) return;\n\n      if (!$(\"#plot-toggle-button\").hasClass(\"active\")) {\n        $(\"#plot-toggle-button\").addClass(\"active\");\n        $(\"#plot-toggle-button\").attr(\"aria-pressed\", true);\n      }\n\n      this.state.plotVisible = true;\n      this.setState(this.state);\n      $(\"#plot\").show();\n      $(\"#plot-map-div\").css(\"height\", \"50%\");\n\n      if (this.state.mapVisible) {\n        $(\"#map\").css(\"width\", \"50%\");\n        map.updateSize();\n        $(\"#plot\").css(\"width\", \"50%\");\n        Plotly.Plots.resize(\"plot\");\n      } else {\n        $(\"#plot\").css(\"width\", \"100%\");\n        Plotly.Plots.resize(\"plot\");\n      }\n    }\n  }, {\n    key: \"hidePlot\",\n    value: function hidePlot() {\n      if (!this.state.plotVisible) return;\n\n      if ($(\"#plot-toggle-button\").hasClass(\"active\")) {\n        $(\"#plot-toggle-button\").removeClass(\"active\");\n        $(\"#plot-toggle-button\").attr(\"aria-pressed\", false);\n      }\n\n      this.state.plotVisible = false;\n      this.setState(this.state);\n      $(\"#plot\").hide();\n\n      if (this.state.mapVisible) {\n        $(\"#map\").css(\"width\", \"100%\");\n        map.updateSize();\n      } else {\n        $(\"#plot-map-div\").css(\"height\", \"0%\");\n      }\n    }\n  }, {\n    key: \"togglePlot\",\n    value: function togglePlot() {\n      if (this.state.plotVisible) {\n        this.hidePlot();\n      } else {\n        this.showPlot();\n      }\n    }\n  }, {\n    key: \"showFilter\",\n    value: function showFilter() {\n      if (this.state.filterVisible) return;\n\n      if (!$(\"#filter-toggle-button\").hasClass(\"active\")) {\n        $(\"#filter-toggle-button\").addClass(\"active\");\n        $(\"#filter-toggle-button\").attr(\"aria-pressed\", true);\n      }\n\n      this.state.filterVisible = true;\n      this.setState(this.state); //$(\"#filter\").show();\n    }\n  }, {\n    key: \"hideFilter\",\n    value: function hideFilter() {\n      if (!this.state.filterVisible) return;\n\n      if ($(\"#filter-toggle-button\").hasClass(\"active\")) {\n        $(\"#filter-toggle-button\").removeClass(\"active\");\n        $(\"#filter-toggle-button\").attr(\"aria-pressed\", false);\n      }\n\n      this.state.filterVisible = false;\n      this.setState(this.state); //$(\"#filter\").hide();\n    }\n  }, {\n    key: \"toggleFilter\",\n    value: function toggleFilter() {\n      if (this.state.filterVisible) {\n        this.hideFilter();\n      } else {\n        this.showFilter();\n      }\n    }\n  }, {\n    key: \"jumpPage\",\n    value: function jumpPage(pg) {\n      if (pg < this.state.numPages && pg >= 0) {\n        this.state.page = pg;\n        this.submitFilter();\n      }\n    }\n  }, {\n    key: \"nextPage\",\n    value: function nextPage() {\n      this.state.page++;\n      this.submitFilter();\n    }\n  }, {\n    key: \"previousPage\",\n    value: function previousPage() {\n      this.state.page--;\n      this.submitFilter();\n    }\n  }, {\n    key: \"repaginate\",\n    value: function repaginate(pag) {\n      console.log(\"Re-Paginating\");\n      this.state.buffSize = pag;\n      this.submitFilter();\n    }\n  }, {\n    key: \"submitFilter\",\n    value: function submitFilter() {\n      //console.log( this.state.filters );\n      var query = this.filterRef.current.getQuery();\n      console.log(\"Submitting filters:\");\n      console.log(query);\n      $(\"#loading\").show();\n      var submissionData = {\n        filterQuery: JSON.stringify(query),\n        pageIndex: this.state.page,\n        numPerPage: this.state.buffSize\n      };\n      console.log(submissionData);\n      $.ajax({\n        type: 'POST',\n        url: '/protected/get_flights',\n        data: submissionData,\n        dataType: 'json',\n        success: function success(response) {\n          console.log(response);\n          $(\"#loading\").hide();\n\n          if (response.errorTitle) {\n            console.log(\"displaying error modal!\");\n            errorModal.show(response.errorTitle, response.errorMessage);\n            return false;\n          }\n\n          console.log(\"got response: \" + response + \" \" + response.size); //get page data\n\n          flightsCard.setFlights(response.data);\n          flightsCard.setIndex(response.index);\n          flightsCard.setSize(response.sizeAll);\n        },\n        error: function error(jqXHR, textStatus, errorThrown) {\n          errorModal.show(\"Error Loading Flights\", errorThrown);\n        },\n        async: true\n      });\n    }\n  }, {\n    key: \"genPages\",\n    value: function genPages() {\n      var page = [];\n\n      for (var i = 0; i < this.state.numPages; i++) {\n        page.push({\n          value: i,\n          name: \"Page \" + (i + 1)\n        });\n      }\n\n      return page;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this10 = this;\n\n      console.log(\"rendering flights!\");\n      var flights = [];\n\n      if (typeof this.state.flights != 'undefined') {\n        flights = this.state.flights;\n      }\n\n      var pages = this.genPages();\n      var style = null;\n\n      if (this.state.mapVisible || this.state.plotVisible) {\n        console.log(\"rendering half\");\n        style = {\n          overflow: \"scroll\",\n          height: \"calc(50% - 56px)\"\n        };\n      } else {\n        style = {\n          overflow: \"scroll\",\n          height: \"calc(100% - 56px)\"\n        };\n      }\n\n      style.padding = \"5\";\n      console.log(flights);\n\n      if (flights.length > 0) {\n        var begin = this.state.page == 0;\n        var end = this.state.page == this.state.numPages - 1;\n        var prev = React.createElement(\"button\", {\n          \"class\": \"btn btn-primary btn-sm\",\n          type: \"button\",\n          onClick: this.previousPage\n        }, \"Previous Page\");\n        var next = React.createElement(\"button\", {\n          \"class\": \"btn btn-primary btn-sm\",\n          type: \"button\",\n          onClick: this.nextPage\n        }, \"Next Page\");\n\n        if (begin) {\n          prev = React.createElement(\"button\", {\n            \"class\": \"btn btn-primary btn-sm\",\n            type: \"button\",\n            onClick: this.previousPage,\n            disabled: true\n          }, \"Previous Page\");\n        }\n\n        if (end) {\n          next = React.createElement(\"button\", {\n            \"class\": \"btn btn-primary btn-sm\",\n            type: \"button\",\n            onClick: this.nextPage,\n            disabled: true\n          }, \"Next Page\");\n        }\n\n        console.log(this.state.end);\n        return React.createElement(\"div\", {\n          className: \"card-body\",\n          style: style\n        }, React.createElement(Filter, {\n          ref: this.filterRef,\n          hidden: !this.state.filterVisible,\n          depth: 0,\n          baseIndex: \"[0-0]\",\n          key: \"[0-0]\",\n          parent: null,\n          type: \"GROUP\",\n          submitFilter: function submitFilter() {\n            _this10.submitFilter();\n          },\n          rules: rules,\n          submitButtonName: \"Apply Filter\"\n        }), React.createElement(\"div\", {\n          \"class\": \"card mb-1 m-1 border-secondary\"\n        }, React.createElement(\"div\", {\n          \"class\": \"p-2\"\n        }, React.createElement(\"button\", {\n          className: \"btn btn-sm btn-info pr-2\",\n          disabled: true\n        }, \"Page: \", this.state.page + 1, \" of \", this.state.numPages), React.createElement(\"div\", {\n          \"class\": \"btn-group mr-1 pl-1\",\n          role: \"group\",\n          \"aria-label\": \"First group\"\n        }, React.createElement(DropdownButton, {\n          className: \"pr-1\",\n          id: \"dropdown-item-button\",\n          title: this.state.buffSize + \" flights per page\",\n          size: \"sm\"\n        }, React.createElement(Dropdown.Item, {\n          as: \"button\",\n          onClick: function onClick() {\n            return _this10.repaginate(10);\n          }\n        }, \"10 flights per page\"), React.createElement(Dropdown.Item, {\n          as: \"button\",\n          onClick: function onClick() {\n            return _this10.repaginate(15);\n          }\n        }, \"15 flights per page\"), React.createElement(Dropdown.Item, {\n          as: \"button\",\n          onClick: function onClick() {\n            return _this10.repaginate(25);\n          }\n        }, \"25 flights per page\"), React.createElement(Dropdown.Item, {\n          as: \"button\",\n          onClick: function onClick() {\n            return _this10.repaginate(50);\n          }\n        }, \"50 flights per page\"), React.createElement(Dropdown.Item, {\n          as: \"button\",\n          onClick: function onClick() {\n            return _this10.repaginate(100);\n          }\n        }, \"100 flights per page\")), React.createElement(Dropdown, {\n          className: \"pr-1\"\n        }, React.createElement(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          size: \"sm\"\n        }, \"Page \" + (this.state.page + 1)), React.createElement(Dropdown.Menu, {\n          style: {\n            maxHeight: \"256px\",\n            overflowY: 'scroll'\n          }\n        }, pages.map(function (pages, index) {\n          return React.createElement(Dropdown.Item, {\n            as: \"button\",\n            onClick: function onClick() {\n              return _this10.jumpPage(pages.value);\n            }\n          }, pages.name);\n        }))), prev, next))), flights.map(function (flightInfo, index) {\n          if (flightInfo != null) {\n            return React.createElement(Flight, {\n              flightInfo: flightInfo,\n              key: flightInfo.id\n            });\n          }\n        }), React.createElement(\"div\", {\n          \"class\": \"card mb-1 m-1 border-secondary\"\n        }, React.createElement(\"div\", {\n          \"class\": \"p-2\"\n        }, React.createElement(\"button\", {\n          className: \"btn btn-sm btn-info pr-2\",\n          disabled: true\n        }, \"Page: \", this.state.page + 1, \" of \", this.state.numPages), React.createElement(\"div\", {\n          \"class\": \"btn-group mr-2 pl-1\",\n          role: \"group\",\n          \"aria-label\": \"First group\"\n        }, prev, next))), React.createElement(\"div\", {\n          id: \"load-more\"\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"card-body\",\n          style: style\n        }, React.createElement(Filter, {\n          ref: this.filterRef,\n          hidden: !this.state.filterVisible,\n          depth: 0,\n          baseIndex: \"[0-0]\",\n          key: \"[0-0]\",\n          parent: null,\n          type: \"GROUP\",\n          submitFilter: function submitFilter() {\n            _this10.submitFilter();\n          },\n          rules: rules,\n          submitButtonName: \"Apply Filter\"\n        }));\n      }\n    }\n  }]);\n\n  return FlightsCard;\n}(React.Component);\n\nvar flightsCard = null; //check to see if flights has been defined already. unfortunately\n//the navbar includes flights.js (bad design) for the navbar buttons\n//to toggle flights, etc. So this is a bit of a hack.\n\nif (typeof flights !== 'undefined') {\n  flightsCard = ReactDOM.render(React.createElement(FlightsCard, null), document.querySelector('#flights-card'));\n  navbar.setFlightsCard(flightsCard);\n  console.log(\"rendered flightsCard!\");\n  $(document).ready(function () {\n    Plotly.newPlot('plot', [], plotlyLayout);\n    var myPlot = document.getElementById(\"plot\");\n    console.log(\"myPlot:\");\n    console.log(myPlot);\n    myPlot.on('plotly_hover', function (data) {\n      var xaxis = data.points[0].xaxis,\n          yaxis = data.points[0].yaxis;\n      /*\n      var infotext = data.points.map(function(d){\n          return ('width: '+xaxis.l2p(d.x)+', height: '+yaxis.l2p(d.y));\n      });\n      */\n      //console.log(\"in hover!\");\n      //console.log(data);\n\n      var x = data.points[0].x; //console.log(\"x: \" + x);\n\n      map.getLayers().forEach(function (layer) {\n        if (layer instanceof VectorLayer) {\n          //console.log(\"VECTOR layer:\");\n          var hiddenStyle = new Style({\n            stroke: new Stroke({\n              color: layer.flightState.state.color,\n              width: 1.5\n            }),\n            image: new Circle({\n              radius: 5,\n              stroke: new Stroke({\n                color: [0, 0, 0, 0],\n                width: 2\n              })\n            })\n          });\n          var visibleStyle = new Style({\n            stroke: new Stroke({\n              color: layer.flightState.state.color,\n              width: 1.5\n            }),\n            image: new Circle({\n              radius: 5,\n              stroke: new Stroke({\n                color: layer.flightState.state.color,\n                width: 2\n              })\n            })\n          });\n\n          if (layer.getVisible()) {\n            if (x < layer.flightState.state.points.length) {\n              console.log(\"need to draw point at: \" + layer.flightState.state.points[x]);\n              layer.flightState.state.trackingPoint.setStyle(visibleStyle);\n              layer.flightState.state.trackingPoint.getGeometry().setCoordinates(layer.flightState.state.points[x]);\n            } else {\n              console.log(\"not drawing point x: \" + x + \" >= points.length: \" + layer.flightState.state.points.length);\n              layer.flightState.state.trackingPoint.setStyle(hiddenStyle);\n            }\n          }\n        }\n      });\n    });\n  });\n}\n\nexport { flightsCard };",null]}