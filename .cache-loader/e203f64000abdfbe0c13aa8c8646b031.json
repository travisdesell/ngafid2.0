{"remainingRequest":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/babel-loader/lib/index.js??ref--4-1!/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/src/main/javascript/update_password.js","dependencies":[{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/src/main/javascript/update_password.js","mtime":1589665823133},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/.babelrc","mtime":1589665823083},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport 'bootstrap';\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { errorModal } from \"./error_modal.js\";\nimport { navbar } from \"./signed_in_navbar.js\";\n\nvar UpdatePasswordCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UpdatePasswordCard, _React$Component);\n\n  function UpdatePasswordCard(props) {\n    var _this;\n\n    _classCallCheck(this, UpdatePasswordCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UpdatePasswordCard).call(this, props));\n    _this.state = {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(UpdatePasswordCard, [{\n    key: \"clearPasswords\",\n    value: function clearPasswords() {\n      this.state = {\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n      };\n      this.setState(this.state);\n    }\n  }, {\n    key: \"updatePassword\",\n    value: function updatePassword(event) {\n      event.preventDefault();\n      var submissionData = {\n        currentPassword: this.state.currentPassword,\n        newPassword: this.state.newPassword,\n        confirmPassword: this.state.confirmPassword\n      };\n      $(\"#loading\").show();\n      $.ajax({\n        type: 'POST',\n        url: '/protected/update_password',\n        data: submissionData,\n        dataType: 'json',\n        success: function success(response) {\n          console.log(\"received response: \");\n          console.log(response);\n          $(\"#loading\").hide();\n\n          if (response.errorTitle) {\n            console.log(\"displaying error modal!\");\n            errorModal.show(response.errorTitle, response.errorMessage);\n            return false;\n          }\n\n          profileCard.clearPasswords();\n        },\n        error: function error(jqXHR, textStatus, errorThrown) {\n          errorModal.show(\"Error Submitting Account Information\", errorThrown);\n        },\n        async: true\n      });\n      console.log(\"submitting account!\");\n    }\n  }, {\n    key: \"changeCurrentPassword\",\n    value: function changeCurrentPassword(event) {\n      this.state.currentPassword = event.target.value;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"changeNewPassword\",\n    value: function changeNewPassword(event) {\n      this.state.newPassword = event.target.value;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"changeConfirmPassword\",\n    value: function changeConfirmPassword(event) {\n      this.state.confirmPassword = event.target.value;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var hidden = this.props.hidden;\n      var bgStyle = {\n        opacity: 0.8\n      };\n      var fgStyle = {\n        opacity: 1.0\n      };\n      var formGroupStyle = {\n        marginBottom: '8px'\n      };\n      var formHeaderStyle = {\n        width: '150px',\n        flex: '0 0 150px'\n      };\n      var labelStyle = {\n        padding: '7 0 7 0',\n        margin: '0',\n        display: 'block',\n        textAlign: 'right'\n      };\n      var validationMessageStyle = {\n        padding: '7 0 7 0',\n        margin: '0',\n        display: 'block',\n        textAlign: 'left',\n        color: 'red'\n      };\n      var currentPassword = this.state.currentPassword;\n      var newPassword = this.state.newPassword;\n      var confirmPassword = this.state.confirmPassword; //passwords must have valid text\n      //new must equal validate\n      //current must not equal new/validate\n\n      var re = /[\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\!\\/\\\\\\.,a-zA-Z0-9 ]*/;\n      var passwordValidationMessage = \"\";\n      var passwordValidationHidden = true;\n\n      if (currentPassword.length == 0) {\n        passwordValidationMessage = \"Please enter your current password.\";\n        passwordValidationHidden = false;\n      } else if (re.test(currentPassword) && currentPassword.length < 10) {\n        passwordValidationMessage = \"Current password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n        passwordValidationHidden = false;\n      } else if (newPassword.length == 0) {\n        passwordValidationMessage = \"Please enter a new password.\";\n        passwordValidationHidden = false;\n      } else if (re.test(newPassword) && newPassword.length < 10) {\n        passwordValidationMessage = \"New password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n        passwordValidationHidden = false;\n      } else if (confirmPassword.length == 0) {\n        passwordValidationMessage = \"Please re-enter your new password.\";\n        passwordValidationHidden = false;\n      } else if (re.test(confirmPassword) && confirmPassword.length < 10) {\n        passwordValidationMessage = \"Confirmation password was not valid. Must be minimum 10 characters long and consist of letters, numbers, spaces and any of the following special characters: @#$%^&*()_+!/\\\\\";\n        passwordValidationHidden = false;\n      } else if (currentPassword == newPassword) {\n        passwordValidationMessage = \"The new password cannot be the same as your current password.\";\n        passwordValidationHidden = false;\n      } else if (newPassword != confirmPassword) {\n        passwordValidationMessage = \"The new password and confirmation password must be the same.\";\n        passwordValidationHidden = false;\n      }\n\n      var updatePasswordDisabled = !passwordValidationHidden;\n      console.log(\"rendering with password validation message: '\" + passwordValidationMessage + \"' and password validation visible: \" + passwordValidationHidden);\n      return React.createElement(\"div\", {\n        className: \"card-body\",\n        hidden: hidden\n      }, React.createElement(\"div\", {\n        className: \"card mb-1\",\n        style: bgStyle\n      }, React.createElement(\"h5\", {\n        className: \"card-header\",\n        style: fgStyle\n      }, \"Update Password\"), React.createElement(\"div\", {\n        className: \"card-body\",\n        style: fgStyle\n      }, React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return _this2.updatePassword(event);\n        }\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        style: formGroupStyle\n      }, React.createElement(\"div\", {\n        className: \"d-flex\"\n      }, React.createElement(\"div\", {\n        className: \"p-2\",\n        style: formHeaderStyle\n      }, React.createElement(\"label\", {\n        htmlFor: \"createPassword\",\n        style: labelStyle\n      }, \"Current Password\")), React.createElement(\"div\", {\n        className: \"p-2 flex-fill\"\n      }, React.createElement(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        id: \"currentPassword\",\n        placeholder: \"Password (required)\",\n        required: true,\n        onChange: function onChange(event) {\n          _this2.changeCurrentPassword(event);\n        },\n        value: this.state.currentPassword\n      })))), React.createElement(\"div\", {\n        className: \"d-flex\"\n      }, React.createElement(\"div\", {\n        className: \"p-2\",\n        style: formHeaderStyle\n      }, React.createElement(\"label\", {\n        htmlFor: \"createPassword\",\n        style: labelStyle\n      }, \"New Password\")), React.createElement(\"div\", {\n        className: \"p-2 flex-fill\"\n      }, React.createElement(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        id: \"newPassword\",\n        placeholder: \"Password (required)\",\n        required: true,\n        onChange: function onChange(event) {\n          _this2.changeNewPassword(event);\n        },\n        value: this.state.newPassword\n      })), React.createElement(\"div\", {\n        className: \"p-2 flex-fill\"\n      }, React.createElement(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        id: \"confirmPassword\",\n        placeholder: \"Confirm password (required)\",\n        required: true,\n        onChange: function onChange(event) {\n          _this2.changeConfirmPassword(event);\n        },\n        value: this.state.confirmPassword\n      }))), React.createElement(\"div\", {\n        className: \"d-flex\"\n      }, React.createElement(\"div\", {\n        className: \"p-2\",\n        style: formHeaderStyle\n      }), React.createElement(\"div\", {\n        className: \"p-2 flex-fill\"\n      }, React.createElement(\"span\", {\n        style: validationMessageStyle,\n        hidden: passwordValidationHidden\n      }, passwordValidationMessage)), React.createElement(\"div\", {\n        className: \"p-2\"\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary float-right\",\n        disabled: updatePasswordDisabled\n      }, \"Update Password\")))))));\n    }\n  }]);\n\n  return UpdatePasswordCard;\n}(React.Component);\n\nvar profileCard = ReactDOM.render(React.createElement(UpdatePasswordCard, null), document.querySelector('#password-card'));",null]}