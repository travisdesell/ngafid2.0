{"remainingRequest":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/babel-loader/lib/index.js??ref--4-1!/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/src/main/javascript/uploads.js","dependencies":[{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/src/main/javascript/uploads.js","mtime":1590111226230},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/.babelrc","mtime":1589665823083},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alabella/RIT/CSResearch/D2S2/ngafid2.0/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport 'bootstrap';\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport { confirmModal } from \"./confirm_modal.js\";\nimport { errorModal } from \"./error_modal.js\";\nimport { navbar } from \"./signed_in_navbar.js\";\nimport SparkMD5 from \"spark-md5\";\nvar paused = [];\nvar chunkSize = 2 * 1024 * 1024; //2MB\n\nvar Upload =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Upload, _React$Component);\n\n  function Upload(props) {\n    _classCallCheck(this, Upload);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Upload).call(this, props));\n  }\n\n  _createClass(Upload, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//console.log(\"upload did mount for filename: '\" + this.props.uploadInfo.filename + \"'\");\n    }\n  }, {\n    key: \"removeUpload\",\n    value: function removeUpload() {\n      $(\"#loading\").show();\n      var submissionData = {\n        uploadId: this.props.uploadInfo.id,\n        md5Hash: this.props.uploadInfo.md5Hash\n      };\n      var thisUpload = this;\n      console.log(\"removing upload:\");\n      console.log(submissionData);\n      $.ajax({\n        type: 'POST',\n        url: '/protected/remove_upload',\n        data: submissionData,\n        dataType: 'json',\n        success: function success(response) {\n          console.log(\"received response: \");\n          console.log(response);\n          $(\"#loading\").hide();\n\n          if (response.errorTitle) {\n            console.log(\"displaying error modal!\");\n            errorModal.show(response.errorTitle, response.errorMessage);\n            return false;\n          }\n\n          uploadsCard.removeUpload(thisUpload.props.uploadInfo);\n        },\n        error: function error(jqXHR, textStatus, errorThrown) {\n          $(\"#loading\").hide();\n          errorModal.show(\"Error removing upload\", errorThrown);\n        },\n        async: true\n      });\n    }\n  }, {\n    key: \"confirmRemoveUpload\",\n    value: function confirmRemoveUpload() {\n      var _this = this;\n\n      console.log(\"attempting to remove upload!\");\n      console.log(this.props);\n      confirmModal.show(\"Confirm Delete: '\" + this.props.uploadInfo.filename + \"'\", \"Are you sure you wish to delete this upload?\\n\\nThis operation will remove it from the server along with all flights and other information from the database. A backup of this upload is not stored on the server and if you wish to retrieve it you will have to re-upload it.\", function () {\n        _this.removeUpload();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var uploadInfo = this.props.uploadInfo;\n      var progressSize = uploadInfo.progressSize;\n      var totalSize = uploadInfo.totalSize;\n      if (progressSize == undefined) progressSize = uploadInfo.bytesUploaded;\n      if (totalSize == undefined) totalSize = uploadInfo.sizeBytes;\n      var width = (progressSize / totalSize * 100).toFixed(2);\n      var sizeText = (progressSize / 1000).toFixed(2).toLocaleString() + \"/\" + (totalSize / 1000).toFixed(2).toLocaleString() + \" kB (\" + width + \"%)\";\n      var statusText = \"\";\n      var progressBarClasses = \"progress-bar\";\n      var statusClasses = \"p-1 pl-2 pr-2 ml-1 card bg-light\";\n      var status = uploadInfo.status;\n\n      if (status == \"HASHING\") {\n        statusText = \"Hashing\";\n        progressBarClasses += \" bg-warning\";\n        statusClasses += \" border-warning text-warning\";\n      } else if (status == \"UPLOADED\") {\n        statusText = \"Uploaded\";\n        progressBarClasses += \" bg-primary\";\n        statusClasses += \" border-primary text-primary\";\n      } else if (status == \"UPLOADING\") {\n        statusText = \"Uploading\";\n      } else if (status == \"UPLOAD INCOMPLETE\") {\n        statusText = \"Upload Incomplete\";\n        progressBarClasses += \" bg-warning\";\n        statusClasses += \" border-warning text-warning\";\n      } else if (status == \"ERROR\") {\n        statusText = \"Import Failed\";\n        progressBarClasses += \" bg-danger\";\n        statusClasses += \" border-danger text-danger\";\n      } else if (status == \"IMPORTED\") {\n        if (uploadInfo.errorFlights == 0 && uploadInfo.warningFlights == 0) {\n          statusText = \"Imported\";\n          progressBarClasses += \" bg-success\";\n          statusClasses += \" border-success text-success\";\n        } else if (uploadInfo.errorFlights != 0 && uploadInfo.errorFlights != 0) {\n          statusText = \"Imported With Errors and Warnings\";\n          progressBarClasses += \" bg-danger\";\n          statusClasses += \" border-danger text-danger \";\n        } else if (uploadInfo.errorFlights != 0) {\n          statusText = \"Imported With Errors\";\n          progressBarClasses += \" bg-danger\";\n          statusClasses += \" border-danger text-danger \";\n        } else if (uploadInfo.warningFlights != 0) {\n          statusText = \"Imported With Warnings\";\n          progressBarClasses += \" bg-warning\";\n          statusClasses += \" border-warning text-warning \";\n        }\n      }\n\n      var progressSizeStyle = {\n        width: width + \"%\",\n        height: \"34px\",\n        textAlign: \"left\",\n        whiteSpace: \"nowrap\"\n      };\n      console.log(\"uploadInfo:\");\n      console.log(uploadInfo);\n      return React.createElement(\"div\", {\n        className: \"m-1\"\n      }, React.createElement(\"div\", {\n        className: \"d-flex flex-row\"\n      }, React.createElement(\"div\", {\n        className: \"p-1 mr-1 card border-light bg-light\",\n        style: {\n          flex: \"0 0 15em\"\n        }\n      }, uploadInfo.filename), React.createElement(\"div\", {\n        className: \"p-1 mr-1 card border-light bg-light\",\n        style: {\n          flex: \"0 0 15em\"\n        }\n      }, uploadInfo.startTime), React.createElement(\"div\", {\n        className: \"flex-fill card progress\",\n        style: {\n          height: \"34px\",\n          padding: \"0 0 0 0\"\n        }\n      }, React.createElement(\"div\", {\n        className: progressBarClasses,\n        role: \"progressbar\",\n        style: progressSizeStyle,\n        \"aria-valuenow\": width,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": \"100\"\n      }, \"\\xA0 \", sizeText)), React.createElement(\"div\", {\n        className: statusClasses,\n        style: {\n          flex: \"0 0 18em\"\n        }\n      }, statusText), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger btn-sm\",\n        style: {\n          width: \"34px\",\n          marginLeft: \"4px\",\n          padding: \"2 4 4 4\"\n        }\n      }, \" \", React.createElement(\"i\", {\n        className: \"fa fa-times\",\n        \"aria-hidden\": \"true\",\n        style: {\n          padding: \"4 4 3 4\"\n        },\n        onClick: function onClick() {\n          return _this2.confirmRemoveUpload();\n        }\n      }), \" \")));\n    }\n  }]);\n\n  return Upload;\n}(React.Component);\n\nfunction getUploadeIdentifier(filename, size) {\n  return size + '-' + filename.replace(/[^0-9a-zA-Z_-]/img, '');\n}\n\nvar UploadsCard =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(UploadsCard, _React$Component2);\n\n  function UploadsCard(props) {\n    var _this3;\n\n    _classCallCheck(this, UploadsCard);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(UploadsCard).call(this, props));\n    _this3.state = {\n      uploads: _this3.props.uploads,\n      page: _this3.props.page,\n      buffSize: 10,\n      //def size of uploads to show per page is 10\n      numPages: _this3.props.numPages\n    };\n    _this3.previousPage = _this3.previousPage.bind(_assertThisInitialized(_this3));\n    _this3.nextPage = _this3.nextPage.bind(_assertThisInitialized(_this3));\n    _this3.repaginate = _this3.repaginate.bind(_assertThisInitialized(_this3));\n    console.log(\"constructed UploadsCard, set mainCards\");\n    console.log(\"initial index: \" + _this3.state.page);\n    return _this3;\n  }\n\n  _createClass(UploadsCard, [{\n    key: \"getUploadsCard\",\n    value: function getUploadsCard() {\n      return this;\n    }\n  }, {\n    key: \"setUploads\",\n    value: function setUploads(uploads) {\n      this.state.uploads = uploads;\n    }\n  }, {\n    key: \"getMD5Hash\",\n    value: function getMD5Hash(file, onFinish, uploadsCard) {\n      var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,\n          chunkSize = 2097152,\n          // Read in chunks of 2MB\n      chunks = Math.ceil(file.size / chunkSize),\n          currentChunk = 0,\n          spark = new SparkMD5.ArrayBuffer(),\n          fileReader = new FileReader();\n\n      fileReader.onload = function (e) {\n        console.log('read chunk nr', currentChunk + 1, 'of', chunks);\n        spark.append(e.target.result); // Append array buffer\n\n        currentChunk++;\n\n        if (currentChunk % 5 == 0) {\n          //var percent = (currentChunk / chunks) * 100.0;\n          var state = uploadsCard.state;\n          console.log(\"inside onload function!\");\n          console.log(state);\n          console.log(file);\n          state.uploads[file.position].progressSize = currentChunk * chunkSize;\n          uploadsCard.setState(state); //set_progressbar_percent(file.identifier, percent);\n        }\n\n        if (currentChunk < chunks) {\n          loadNext();\n        } else {\n          //reset progress bar for uploading\n          var _state = uploadsCard.state;\n          _state.uploads[file.position].progressSize = 0;\n          _state.uploads[file.position].status = \"UPLOADING\";\n          uploadsCard.setState(_state);\n          onFinish(spark.end());\n        }\n      };\n\n      fileReader.onerror = function () {\n        errorModal.show(\"File Upload Error\", \"Could not upload file because of an error generating it's MD5 hash. Please reload the page and try again.\");\n      };\n\n      function loadNext() {\n        var start = currentChunk * chunkSize,\n            end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n      }\n\n      loadNext();\n    }\n  }, {\n    key: \"startUpload\",\n    value: function startUpload(file) {\n      //different versions of firefox have different field names\n      var filename = file.webkitRelativePath || file.fileName || file.name;\n      var identifier = file.identifier;\n      var position = file.position;\n      paused[identifier] = false;\n      var numberChunks = Math.ceil(file.size / chunkSize);\n      var uploadInfo = {};\n      uploadInfo.identifier = identifier;\n      uploadInfo.filename = filename;\n      uploadInfo.uploadedChunks = 0;\n      uploadInfo.numberChunks = numberChunks;\n      uploadInfo.sizeBytes = file.size;\n      uploadInfo.bytesUploaded = 0;\n      uploadInfo.status = 'HASHING';\n      var uploadsCard = this;\n\n      function onFinish(md5Hash) {\n        file.md5Hash = md5Hash;\n        console.log(\"got md5Hash: '\" + md5Hash + \"'\");\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST', '/protected/new_upload');\n\n        xhr.onload = function () {\n          console.log(\"New upload response: \" + xhr.responseText);\n          var response = JSON.parse(xhr.responseText);\n          var filename = file.webkitRelativePath || file.fileName || file.name; //check and see if there was an error in the response!\n\n          if (response.errorTitle !== undefined) {\n            errorModal.show(response.errorTitle, response.errorMessage + \"<br>On file: '\" + filename + \"'\");\n            uploadsCard.removeUpload(file);\n          } else {\n            var uploadInfo = response;\n            uploadInfo.file = file; //set the file in the response uploadInfo so it can be used later\n\n            uploadInfo.identifier = identifier;\n            uploadInfo.position = position;\n            uploadsCard.updateUpload(uploadInfo);\n          }\n        };\n\n        var formData = new FormData(); //formData.append(\"idToken\", idToken);\n\n        formData.append(\"idToken\", \"TEST_ID_TOKEN\");\n        formData.append(\"request\", \"NEW_UPLOAD\");\n        formData.append(\"filename\", filename);\n        formData.append(\"identifier\", identifier);\n        formData.append(\"numberChunks\", numberChunks);\n        formData.append(\"sizeBytes\", file.size);\n        formData.append(\"md5Hash\", md5Hash);\n        xhr.send(formData);\n      }\n\n      var md5Hash = this.getMD5Hash(file, onFinish, this);\n    }\n  }, {\n    key: \"addUpload\",\n    value: function addUpload(file) {\n      var filename = file.webkitRelativePath || file.fileName || file.name;\n      var progressSize = 0;\n      var status = \"HASHING\";\n      var totalSize = file.size;\n      console.log(\"adding filename: '\" + filename + \"'\");\n      var uploads = this.state.uploads;\n      var identifier = getUploadeIdentifier(filename, totalSize);\n      console.log(\"CREATED IDENTIFIER: \" + identifier);\n      file.identifier = identifier;\n      file.position = uploads.length;\n      var alreadyExists = false;\n\n      for (var i = 0; i < uploads.length; i++) {\n        if (uploads[i].identifier == identifier) {\n          if (uploads[i].status == \"UPLOAD INCOMPLETE\") {\n            //upload already exists in the list but is incomplete, so we need to restart it\n            alreadyExists = true;\n            file.position = i;\n          } else {\n            console.log(\"file already exists, not adding!\");\n            return;\n          }\n        }\n      }\n\n      if (!alreadyExists) {\n        uploads.push({\n          identifier: identifier,\n          filename: filename,\n          status: status,\n          totalSize: totalSize,\n          progressSize: progressSize\n        });\n      }\n\n      var state = this.state;\n      state.uploads = uploads;\n      this.setState(state);\n      this.startUpload(file);\n    }\n  }, {\n    key: \"removeUpload\",\n    value: function removeUpload(file) {\n      if (file.position < uploads.length) {\n        var _uploads = this.state.uploads;\n\n        _uploads.splice(file.position, 1);\n\n        for (var i = 0; i < _uploads.length; i++) {\n          _uploads[i].position = i;\n        }\n\n        var state = this.state;\n        state.uploads = _uploads;\n        this.setState(state);\n        this.submitPagination(); //refresh data for UI\n      }\n    }\n  }, {\n    key: \"updateUpload\",\n    value: function updateUpload(uploadInfo) {\n      var file = uploadInfo.file;\n      var position = uploadInfo.position;\n      var numberChunks = parseInt(uploadInfo.numberChunks);\n      var filename = uploadInfo.filename;\n      var identifier = uploadInfo.identifier;\n      var chunkStatus = uploadInfo.chunkStatus;\n      var chunkNumber = chunkStatus.indexOf(\"0\"); //console.log(\"chunk status: '\" + chunkStatus + \"'\");\n\n      console.log(\"next chunk: \" + chunkNumber + \" of \" + numberChunks);\n      uploadInfo.progressSize = uploadInfo.bytesUploaded;\n      uploadInfo.totalSize = uploadInfo.sizeBytes;\n      var uploads = this.state.uploads;\n      uploads[uploadInfo.position] = uploadInfo;\n      var state = this.state;\n      this.setState(state);\n      var uploadsCard = this;\n      var fileReader = new FileReader();\n      var startByte = parseInt(chunkNumber) * parseInt(chunkSize);\n      var endByte = Math.min(parseInt(startByte) + parseInt(chunkSize), file.size); //console.log(\"startByte: \" + startByte + \", endByte: \" + endByte + \", chunkSize: \" + chunkSize);\n\n      var func = file.slice ? 'slice' : file.mozSlice ? 'mozSlice' : file.webkitSlice ? 'webkitSlice' : 'slice';\n      var bytes = file[func](startByte, endByte, void 0); //console.log(bytes);\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('POST', '/protected/upload'); //xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n\n      xhr.onload = function () {\n        console.log(\"Upload response: \" + xhr.responseText);\n        var response = JSON.parse(xhr.responseText);\n\n        if (response.errorTitle !== undefined) {\n          errorModal.show(response.errorTitle, response.errorMessage + \"<br>On file: '\" + filename + \"'\");\n        } else {\n          var uploadInfo = response;\n          uploadInfo.file = file; //set the fileObject so we can use it for restarts\n\n          uploadInfo.position = position;\n          var numberChunks = Math.ceil(file.size / chunkSize);\n          console.log(\"uploaded chunk \" + chunkNumber + \" of \" + numberChunks);\n          var chunkStatus = uploadInfo.chunkStatus;\n          chunkNumber = chunkStatus.indexOf(\"0\"); //console.log(\"chunk status: '\" + chunkStatus + \"'\");\n          //console.log(\"next chunk: \" + chunkNumber);\n          //chunkNumber = chunkNumber + 1;\n\n          if (chunkNumber > -1) {\n            //console.log(\"uploading next chunk with response:\");\n            //console.log(response);\n            uploadsCard.updateUpload(uploadInfo);\n          } else {\n            var _uploads2 = uploadsCard.state.uploads;\n            _uploads2[uploadInfo.position] = uploadInfo;\n            var _state2 = uploadsCard.state;\n            uploadsCard.setState(_state2);\n          }\n        }\n      };\n\n      console.log(\"appending identifier: \" + file.identifier);\n      var formData = new FormData(); //formData.append(\"idToken\", idToken);\n\n      formData.append(\"idToken\", \"TEST_ID_TOKEN\");\n      formData.append(\"request\", \"UPLOAD\");\n      formData.append(\"chunkNumber\", chunkNumber);\n      formData.append(\"identifier\", file.identifier);\n      formData.append(\"md5Hash\", file.md5Hash);\n      formData.append(\"chunk\", bytes, file.fileName);\n      xhr.send(formData);\n    }\n  }, {\n    key: \"jumpPage\",\n    value: function jumpPage(pg) {\n      if (pg < this.state.numPages && pg >= 0) {\n        this.state.page = pg;\n      }\n\n      this.setState(this.state);\n      this.submitPagination();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.state.numPages = size;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"nextPage\",\n    value: function nextPage() {\n      this.state.page++;\n      this.submitPagination();\n    }\n  }, {\n    key: \"previousPage\",\n    value: function previousPage() {\n      this.state.page--;\n      this.submitPagination();\n    }\n  }, {\n    key: \"setIndex\",\n    value: function setIndex(index) {\n      this.state.page = index;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"repaginate\",\n    value: function repaginate(pag) {\n      console.log(\"Re-Paginating\");\n      this.state.buffSize = pag;\n      this.submitPagination();\n    }\n  }, {\n    key: \"submitPagination\",\n    value: function submitPagination() {\n      //prep data\n      var uploadsCard = this;\n      var submissionData = {\n        index: this.state.page,\n        buffSize: this.state.buffSize\n      };\n      console.log(submissionData);\n      $.ajax({\n        type: 'POST',\n        url: '/protected/uploads',\n        data: submissionData,\n        dataType: 'json',\n        success: function success(response) {\n          console.log(response);\n          $(\"#loading\").hide();\n\n          if (response.errorTitle) {\n            console.log(\"displaying error modal!\");\n            errorModal.show(response.errorTitle, response.errorMessage);\n            return false;\n          }\n\n          console.log(\"got response: \" + response + \" \" + response.sizeAll); //get page data\n\n          uploadsCard.setUploads(response.data);\n          uploadsCard.setIndex(response.index);\n          uploadsCard.setSize(response.sizeAll);\n        },\n        error: function error(jqXHR, textStatus, errorThrown) {\n          errorModal.show(\"Error Loading Flights\", errorThrown);\n        },\n        async: true\n      });\n    }\n  }, {\n    key: \"genPages\",\n    value: function genPages() {\n      var page = [];\n\n      for (var i = 0; i < this.state.numPages; i++) {\n        page.push({\n          value: i,\n          name: \"Page \" + (i + 1)\n        });\n      }\n\n      return page;\n    }\n  }, {\n    key: \"triggerInput\",\n    value: function triggerInput() {\n      var uploadsCard = this;\n      $('#upload-file-input').trigger('click');\n      $('#upload-file-input:not(.bound)').addClass('bound').change(function () {\n        console.log(\"number files selected: \" + this.files.length);\n        console.log(this.files);\n\n        if (this.files.length > 0) {\n          var file = this.files[0];\n          var filename = file.webkitRelativePath || file.fileName || file.name;\n          var isZip = file['type'].includes(\"zip\");\n          console.log(\"isZip: \" + isZip);\n\n          if (!filename.match(/^[a-zA-Z0-9_.-]*$/)) {\n            errorModal.show(\"Malformed Filename\", \"The filename was malformed. Filenames must only contain letters, numbers, dashes ('-'), underscores ('_') and periods.\");\n          } else if (!isZip) {\n            errorModal.show(\"Malformed Filename\", \"Uploaded files must be zip files. The zip file should contain directories which contain flight logs (csv files). The directories should be named for the tail number of the airfraft that generated the flight logs within them.\");\n          } else {\n            uploadsCard.addUpload(file);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      console.log(\"rendering uploads!\");\n      var hiddenStyle = {\n        display: \"none\"\n      };\n      var uploads = [];\n      var pages = this.genPages();\n\n      if (typeof this.state.uploads != 'undefined') {\n        uploads = this.state.uploads;\n      }\n\n      var prev = React.createElement(\"button\", {\n        \"class\": \"btn btn-primary btn-sm\",\n        type: \"button\",\n        onClick: this.previousPage\n      }, \"Previous Page\");\n      var next = React.createElement(\"button\", {\n        \"class\": \"btn btn-primary btn-sm\",\n        type: \"button\",\n        onClick: this.nextPage\n      }, \"Next Page\");\n      var dropdownToggle = React.createElement(Dropdown.Toggle, {\n        variant: \"primary\",\n        id: \"dropdown-basic\",\n        size: \"sm\"\n      }, \"Page \" + (this.state.page + 1), \" \");\n      var buffSizeSelector = React.createElement(DropdownButton, {\n        id: \"dropdown-item-button\",\n        title: this.state.buffSize + \" uploads per page\",\n        size: \"sm\"\n      }, React.createElement(Dropdown.Item, {\n        as: \"button\",\n        onClick: function onClick() {\n          return _this4.repaginate(10);\n        }\n      }, \"10 uploads per page\"), React.createElement(Dropdown.Item, {\n        as: \"button\",\n        onClick: function onClick() {\n          return _this4.repaginate(15);\n        }\n      }, \"15 uploads per page\"), React.createElement(Dropdown.Item, {\n        as: \"button\",\n        onClick: function onClick() {\n          return _this4.repaginate(25);\n        }\n      }, \"25 uploads per page\"), React.createElement(Dropdown.Item, {\n        as: \"button\",\n        onClick: function onClick() {\n          return _this4.repaginate(50);\n        }\n      }, \"50 uploads per page\"), React.createElement(Dropdown.Item, {\n        as: \"button\",\n        onClick: function onClick() {\n          return _this4.repaginate(100);\n        }\n      }, \"100 uploads per page\"));\n\n      if (this.state.page == 0 || this.state.numPages == 0) {\n        prev = React.createElement(\"button\", {\n          \"class\": \"btn btn-primary btn-sm\",\n          type: \"button\",\n          onClick: this.previousPage,\n          disabled: true\n        }, \"Previous Page\");\n      }\n\n      if (this.state.page == this.state.numPages - 1 || this.state.numPages == 0) {\n        next = React.createElement(\"button\", {\n          \"class\": \"btn btn-primary btn-sm\",\n          type: \"button\",\n          onClick: this.nextPage,\n          disabled: true\n        }, \"Next Page\");\n      }\n\n      var pageStat;\n\n      if (this.state.numPages > 0) {\n        pageStat = \"Page: \" + (this.state.page + 1) + \" of \" + this.state.numPages;\n      } else {\n        pageStat = \"No uploads yet!\";\n        dropdownToggle = React.createElement(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          size: \"sm\",\n          disabled: true\n        }, \"No uploads here yet!\");\n        buffSizeSelector = React.createElement(DropdownButton, {\n          id: \"dropdown-item-button\",\n          title: \"Number of uploads per page\",\n          size: \"sm\",\n          disabled: true\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"card-body\"\n      }, React.createElement(\"div\", {\n        className: \"card mb-1 m-1\",\n        style: {\n          background: \"rgba(248,259,250,0.8)\"\n        }\n      }, React.createElement(\"div\", {\n        \"class\": \"card mb-1 m-1 border-secondary\"\n      }, React.createElement(\"div\", {\n        \"class\": \"p-2\"\n      }, React.createElement(\"div\", {\n        \"class\": \"btn-group mr-1\",\n        role: \"group\",\n        \"aria-label\": \"First group\"\n      }, buffSizeSelector, React.createElement(Dropdown, null, dropdownToggle, React.createElement(Dropdown.Menu, {\n        style: {\n          maxHeight: \"256px\",\n          overflowY: 'scroll'\n        }\n      }, pages.map(function (pages, index) {\n        return React.createElement(Dropdown.Item, {\n          as: \"button\",\n          onClick: function onClick() {\n            return _this4.jumpPage(pages.value);\n          }\n        }, pages.name);\n      }))), prev, next, React.createElement(\"input\", {\n        id: \"upload-file-input\",\n        type: \"file\",\n        style: hiddenStyle\n      }), React.createElement(\"button\", {\n        id: \"upload-flights-button\",\n        className: \"btn btn-primary btn-sm\",\n        onClick: function onClick() {\n          return _this4.triggerInput();\n        }\n      }, React.createElement(\"i\", {\n        className: \"fa fa-upload\"\n      }), \" Upload Flights\")))), uploads.map(function (uploadInfo, index) {\n        uploadInfo.position = index;\n        return React.createElement(Upload, {\n          uploadInfo: uploadInfo,\n          key: uploadInfo.identifier\n        });\n      }), React.createElement(\"div\", {\n        \"class\": \"card mb-1 m-1 border-secondary\"\n      }, React.createElement(\"div\", {\n        \"class\": \"p-2\"\n      }, React.createElement(\"div\", {\n        \"class\": \"btn-group mr-2\",\n        role: \"group\",\n        \"aria-label\": \"First group\"\n      }, prev, next, React.createElement(\"button\", {\n        id: \"upload-flights-button\",\n        className: \"btn btn-primary btn-sm\",\n        onClick: function onClick() {\n          return _this4.triggerInput();\n        }\n      }, React.createElement(\"i\", {\n        className: \"fa fa-upload\"\n      }), \" Upload Flights\")), React.createElement(\"div\", {\n        \"class\": \"p-1\"\n      }, pageStat)))));\n    }\n  }]);\n\n  return UploadsCard;\n}(React.Component);\n\nvar uploadsCard = ReactDOM.render(React.createElement(UploadsCard, {\n  uploads: uploads,\n  numPages: numPages,\n  page: index\n}), document.querySelector('#uploads-card'));",null]}